// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WooW.SB.BlazorGenerator.BlazorTemplates.CommonTemplates.Shared
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Shared\WoTemplateWoLoginLayoutPartialBlazor.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class WoTemplateWoLoginLayoutPartialBlazor : WoTemplateWoLoginLayoutPartialBlazorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"
///------------------------------------------------------------------------------------------------------------------
/// Código autogenerado por la template WoTemplateGenericClass en el path WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Shared\WoTemplateWoLoginLayoutPartialBlazor.tt
/// Genera código consistente con la version de la prueba de concepto a dia 05-10-2023 En Blazor Wasm y Server
/// Este código es auto generado y su modificación puede causar que el código no se comporte como deveria ademas de
/// que se perderan los cambios realizados en el código al momento de la generación.
///------------------------------------------------------------------------------------------------------------------

using ");
            
            #line 15 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Shared\WoTemplateWoLoginLayoutPartialBlazor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Project));
            
            #line default
            #line hidden
            this.Write(".ControlModels;\r\nusing ");
            
            #line 16 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Shared\WoTemplateWoLoginLayoutPartialBlazor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Project));
            
            #line default
            #line hidden
            this.Write(".FluentValidators;\r\nusing ");
            
            #line 17 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Shared\WoTemplateWoLoginLayoutPartialBlazor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Project));
            
            #line default
            #line hidden
            this.Write(".UserCode;\r\n\r\nusing FluentValidation.Results;\r\nusing Microsoft.AspNetCore.Compone" +
                    "nts;\r\nusing Microsoft.AspNetCore.Components.Web;\r\nusing WooW.Core;\r\nusing WooW.M" +
                    "odel;\r\nusing WooW.Blazor;\r\n\r\nnamespace ");
            
            #line 26 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Shared\WoTemplateWoLoginLayoutPartialBlazor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Project));
            
            #line default
            #line hidden
            this.Write(".Shared\r\n{\r\n    public partial class WoLoginLayout\r\n    {\r\n        #region Depend" +
                    "encias\r\n\r\n        /// <summary>\r\n        /// Instancia con los métodos de los ev" +
                    "entos de los controles.\r\n        /// </summary>\r\n        [Inject]\r\n        priva" +
                    "te LoginScriptsUser _scriptsUser { get; set; }\r\n\r\n        /// <summary>\r\n       " +
                    " /// Inyección de la clase con las vistas para manipular los controles.\r\n       " +
                    " /// </summary>\r\n        [Inject]\r\n        public WoLoginControls _modelControls" +
                    " { get; set; }\r\n\r\n        #endregion Dependencias\r\n\r\n\r\n        #region Métodos a" +
                    "dicionales\r\n\r\n        /// <summary>\r\n        /// Método que permite actualizar e" +
                    "l formulario.\r\n        /// Solo realiza un re dibujado de la vista.\r\n        ///" +
                    " </summary>\r\n        private void UpdateEntireForm() => StateHasChanged();\r\n\r\n  " +
                    "      /// <summary>\r\n        /// Verifica que el formulario se haya iniciado y\r\n" +
                    "        /// si es el caso, ejecuta el método de inicio.\r\n        /// </summary>\r" +
                    "\n        private void CheckForm()\r\n        {\r\n            _scriptsUser.Formulari" +
                    "oIniciado();\r\n        }\r\n\r\n        #endregion Métodos adicionales\r\n\r\n\r\n        #" +
                    "region Fluent Autenticación\r\n\r\n        /// <summary>\r\n        /// Instancia de l" +
                    "a clase con las reglas de fluent, permite la validación del objeto.\r\n        ///" +
                    " <summary>\r\n        private AutenticateValidator _authValidator = new Autenticat" +
                    "eValidator();\r\n\r\n        /// <summary>\r\n        /// Guarda el resultado de la va" +
                    "lidación, los errores que contenga se asignaran a las alertas del componente.\r\n " +
                    "       /// <summary>\r\n        private ValidationResult? _authValidationResult;\r\n" +
                    "\r\n        /// <summary>\r\n        /// Se llama en cada uno de los métodos OnChang" +
                    "e del modelo para validar el cambio del campo con fluent\r\n        /// </summary>" +
                    "\r\n        private void AuthValidate(string id, dynamic control)\r\n        {\r\n    " +
                    "        _authValidationResult = _authValidator.Validate(_scriptsUser.Authenticat" +
                    "e);\r\n            bool noAlerts = true;\r\n\r\n            foreach (var validation in" +
                    " _authValidationResult.Errors)\r\n            {\r\n                if (id == validat" +
                    "ion.PropertyName)\r\n                {\r\n                    noAlerts = false;\r\n   " +
                    "                 control.AgregarAlerta(validation.ToString());\r\n                " +
                    "}\r\n            }\r\n\r\n            if (noAlerts)\r\n            {\r\n                co" +
                    "ntrol.LimpiarAlertas();\r\n            }\r\n\r\n        }\r\n\r\n        #endregion Fluent" +
                    " Autenticación\r\n\r\n        #region Fluent SetUdn\r\n\r\n        /// <summary>\r\n      " +
                    "  /// Instancia de la clase con las reglas de fluent, permite la validación del " +
                    "objeto.\r\n        /// <summary>\r\n        private InstanciaUdnAsignarValidator _in" +
                    "stanceValidator = new InstanciaUdnAsignarValidator();\r\n\r\n        /// <summary>\r\n" +
                    "        /// Guarda el resultado de la validación, los errores que contenga se as" +
                    "ignaran a las alertas del componente.\r\n        /// <summary>\r\n        private Va" +
                    "lidationResult? _instanceValidationResult;\r\n\r\n        /// <summary>\r\n        ///" +
                    " Se llama en cada uno de los métodos OnChange del modelo para validar el cambio " +
                    "del campo con fluent\r\n        /// </summary>\r\n        private void InstanceValid" +
                    "ate(string id, dynamic control)\r\n        {\r\n            _instanceValidationResul" +
                    "t = _instanceValidator.Validate(_scriptsUser.InstanciaUdnAsignar);\r\n            " +
                    "bool noAlerts = true;\r\n\r\n            foreach (var validation in _instanceValidat" +
                    "ionResult.Errors)\r\n            {\r\n                if (id == validation.PropertyN" +
                    "ame)\r\n                {\r\n                    noAlerts = false;\r\n                " +
                    "    control.AgregarAlerta(validation.ToString());\r\n                }\r\n          " +
                    "  }\r\n\r\n            if (noAlerts)\r\n            {\r\n                control.Limpiar" +
                    "Alertas();\r\n            }\r\n\r\n        }\r\n\r\n        #endregion Fluent SetUdn\r\n\r\n\r\n" +
                    "        #region Root\r\n\r\n        /// <summary>\r\n        /// Referencia que repres" +
                    "enta el componente.\r\n        /// </summary>\r\n        private WoForm? _wfRoot;\r\n\r" +
                    "\n        /// <summary>\r\n        /// Suscribe los controladores de eventos de la " +
                    "vista del componente a los\r\n        /// eventos del componente a través de la re" +
                    "ferencia.\r\n        /// </summary>\r\n        public void SetStatusWfRoot()\r\n      " +
                    "  {\r\n            if (_wfRoot != null)\r\n            {\r\n                _modelCont" +
                    "rols.Root.ChangeFontWeightEvt += _wfRoot.ChangeFontWeight;\r\n                _mod" +
                    "elControls.Root.ChangeFontItalicEvt += _wfRoot.ChangeFontItalic;\r\n              " +
                    "  _modelControls.Root.ChangeFontDecorationEvt += _wfRoot.ChangeFontDecoration;\r\n" +
                    "                _modelControls.Root.ChangeFontColorEvt += _wfRoot.ChangeFontColo" +
                    "r;\r\n                _modelControls.Root.ChangeBackColorEvt += _wfRoot.ChangeBack" +
                    "groundColor;\r\n\r\n                _modelControls.Root.ActualizarComponente();\r\n   " +
                    "             CheckForm();\r\n            }\r\n        }\r\n\r\n        #endregion Root\r\n" +
                    "\r\n        #region formModelForm\r\n\r\n        /// <summary>\r\n        /// Referencia" +
                    " que representa el componente.\r\n        /// </summary>\r\n        private WoFormGr" +
                    "oup? _wfgformModelForm;\r\n\r\n        /// <summary>\r\n        /// Suscribe los contr" +
                    "oladores de eventos de la vista del componente a los\r\n        /// eventos del co" +
                    "mponente a través de la referencia.\r\n        /// </summary>\r\n        public void" +
                    " SetStatusWfgformModelForm()\r\n        {\r\n            if (_wfgformModelForm != nu" +
                    "ll)\r\n            {\r\n                _modelControls.formModelForm.ChangeFontWeigh" +
                    "tEvt += _wfgformModelForm.ChangeFontWeight;\r\n                _modelControls.form" +
                    "ModelForm.ChangeFontItalicEvt += _wfgformModelForm.ChangeFontItalic;\r\n          " +
                    "      _modelControls.formModelForm.ChangeFontDecorationEvt += _wfgformModelForm." +
                    "ChangeFontDecoration;\r\n                _modelControls.formModelForm.ChangeFontCo" +
                    "lorEvt += _wfgformModelForm.ChangeFontColor;\r\n                _modelControls.for" +
                    "mModelForm.ChangeBackColorEvt += _wfgformModelForm.ChangeBackgroundColor;\r\n     " +
                    "           _modelControls.formModelForm.ChangeIconEvt += _wfgformModelForm.Chang" +
                    "eIcon;\r\n\r\n                _modelControls.formModelForm.ActualizarComponente();\r\n" +
                    "                CheckForm();\r\n            }\r\n        }\r\n\r\n        #endregion for" +
                    "mModelForm\r\n\r\n\r\n        #region Alerts\r\n\r\n        /// <summary>\r\n        /// Ref" +
                    "erencia que representa el componente de alertas.\r\n        /// </summary>\r\n      " +
                    "  private WoFormAlert? _alerts;\r\n\r\n        /// <summary>\r\n        /// Suscribe l" +
                    "os controladores de eventos de la vista del componente a los\r\n        /// evento" +
                    "s del componente a través de la referencia.\r\n        /// </summary>\r\n        pub" +
                    "lic void SetStatusAlerts()\r\n        {\r\n            if (_alerts != null)\r\n       " +
                    "     {\r\n                _modelControls.Alertas.AddAlertEvt += _alerts.AddAlert;\r" +
                    "\n                _modelControls.Alertas.RemoveAlertEvt += _alerts.RemoveAlert;\r\n" +
                    "                _modelControls.Alertas.CleanAlertsEvt += _alerts.CleanAll;\r\n    " +
                    "        }\r\n        }\r\n\r\n        #endregion Alerts\r\n\r\n\r\n        #region User\r\n\r\n " +
                    "       /// <summary>\r\n        /// Referencia que representa el componente.\r\n    " +
                    "    /// </summary>\r\n        private WoTextEdit<App>? _txtUser;\r\n\r\n        /// <s" +
                    "ummary>\r\n        /// Suscribe los controladores de eventos de la vista del compo" +
                    "nente a los\r\n        /// eventos del componente a través de la referencia.\r\n    " +
                    "    /// </summary>\r\n        public void SetStatusTxtUser()\r\n        {\r\n         " +
                    "   if (_txtUser != null)\r\n            {\r\n                _modelControls.User.Cha" +
                    "ngeEnabledEvt += _txtUser.ChangeStatus;\r\n                _modelControls.User.Cha" +
                    "ngeSizeEvt += _txtUser.ChangeFontSize;\r\n\r\n                _modelControls.User.Ch" +
                    "angeControlFontColorEvt += _txtUser.ChangeControlFontColor;\r\n                _mo" +
                    "delControls.User.ChangeControlFontWeightEvt += _txtUser.ChangeControlFontWeight;" +
                    "\r\n                _modelControls.User.ChangeControlFontItalicEvt += _txtUser.Cha" +
                    "ngeControlFontItalic;\r\n                _modelControls.User.ChangeControlFontDeco" +
                    "rationEvt += _txtUser.ChangeControlFontDecoration;\r\n\r\n                _modelCont" +
                    "rols.User.ChangeBackColorEvt += _txtUser.ChangeBackgroundColor;\r\n\r\n             " +
                    "   _modelControls.User.ActualizarComponente();\r\n                CheckForm();\r\n  " +
                    "          }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Referencia del cont" +
                    "enedor del item\r\n        /// </summary>\r\n        private WoFormItem? _fliUser;\r\n" +
                    "\r\n        /// <summary>\r\n        /// Suscrive los controladores de eventos de la" +
                    " vista del componente a los \r\n        /// eventos del componente a través de la " +
                    "referencia.\r\n        /// </summary>\r\n        /// <param name=\"status\"></param>\r\n" +
                    "        public void SetStatusFliUser()\r\n        {\r\n            if (_fliUser != n" +
                    "ull)\r\n            {\r\n                _modelControls.UserContainer.ChangeCaptionF" +
                    "ontColorEvt += _fliUser.ChangeCaptionFontColor;\r\n                _modelControls." +
                    "UserContainer.ChangeCaptionFontWeightEvt += _fliUser.ChangeCaptionFontWeight;\r\n " +
                    "               _modelControls.UserContainer.ChangeCaptionFontItalicEvt += _fliUs" +
                    "er.ChangeCaptionFontItalic;\r\n                _modelControls.UserContainer.Change" +
                    "CaptionFontDecorationEvt += _fliUser.ChangeCaptionFontDecoration;\r\n             " +
                    "   _modelControls.UserContainer.ChangeSizeEvt += _fliUser.ChangeFontSize;\r\n     " +
                    "       }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Referencia de la alert" +
                    "a del input.\r\n        /// </summary>\r\n        private WoInputAlert? _wiaUser;\r\n\r" +
                    "\n        /// <summary>\r\n        /// Suscrive los controladores de eventos de la " +
                    "vista a los eventos del componenrte a través de la referencia..\r\n        /// </s" +
                    "ummary>\r\n        public void SetStatusWiaUser()\r\n        {\r\n            if (_wia" +
                    "User != null)\r\n            {\r\n                _modelControls.UserAlert.SetAlertV" +
                    "alueEvt += _wiaUser.SetAlertValue;\r\n                _modelControls.UserAlert.Cle" +
                    "arAlertsEvt += _wiaUser.ClearAlerts;\r\n            }\r\n        }\r\n\r\n        /// <s" +
                    "ummary>\r\n        /// Evento del componente que se ejecuta cuando se modifica el " +
                    "valor del componente Id.\r\n        /// </summary>\r\n        public void User_OnCha" +
                    "nge(String? newValue)\r\n        {\r\n            _scriptsUser.Authenticate.UserName" +
                    " = newValue;\r\n            AuthValidate(\"UserName\", _modelControls.UserAlert);\r\n " +
                    "           _scriptsUser.User_OnChange();\r\n        }\r\n\r\n        #endregion User\r\n" +
                    "\r\n        #region Password\r\n\r\n        /// <summary>\r\n        /// Referencia que " +
                    "representa el componente.\r\n        /// </summary>\r\n        private WoTextEdit<Ap" +
                    "p>? _txtPassword;\r\n\r\n        /// <summary>\r\n        /// Suscribe los controlador" +
                    "es de eventos de la vista del componente a los\r\n        /// eventos del componen" +
                    "te a través de la referencia.\r\n        /// </summary>\r\n        public void SetSt" +
                    "atusTxtPassword()\r\n        {\r\n            if (_txtPassword != null)\r\n           " +
                    " {\r\n                _modelControls.Password.ChangeEnabledEvt += _txtPassword.Cha" +
                    "ngeStatus;\r\n                _modelControls.Password.ChangeSizeEvt += _txtPasswor" +
                    "d.ChangeFontSize;\r\n\r\n                _modelControls.Password.ChangeControlFontCo" +
                    "lorEvt += _txtPassword.ChangeControlFontColor;\r\n                _modelControls.P" +
                    "assword.ChangeControlFontWeightEvt += _txtPassword.ChangeControlFontWeight;\r\n   " +
                    "             _modelControls.Password.ChangeControlFontItalicEvt += _txtPassword." +
                    "ChangeControlFontItalic;\r\n                _modelControls.Password.ChangeControlF" +
                    "ontDecorationEvt += _txtPassword.ChangeControlFontDecoration;\r\n\r\n               " +
                    " _modelControls.Password.ChangeBackColorEvt += _txtPassword.ChangeBackgroundColo" +
                    "r;\r\n\r\n                _modelControls.Password.ActualizarComponente();\r\n         " +
                    "       CheckForm();\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        " +
                    "/// Referencia del contenedor del item\r\n        /// </summary>\r\n        private " +
                    "WoFormItem? _fliPassword;\r\n\r\n        /// <summary>\r\n        /// Suscrive los con" +
                    "troladores de eventos de la vista del componente a los \r\n        /// eventos del" +
                    " componente a través de la referencia.\r\n        /// </summary>\r\n        /// <par" +
                    "am name=\"status\"></param>\r\n        public void SetStatusFliPassword()\r\n        {" +
                    "\r\n            if (_fliPassword != null)\r\n            {\r\n                _modelCo" +
                    "ntrols.UserContainer.ChangeCaptionFontColorEvt += _fliPassword.ChangeCaptionFont" +
                    "Color;\r\n                _modelControls.UserContainer.ChangeCaptionFontWeightEvt " +
                    "+= _fliPassword.ChangeCaptionFontWeight;\r\n                _modelControls.UserCon" +
                    "tainer.ChangeCaptionFontItalicEvt += _fliPassword.ChangeCaptionFontItalic;\r\n    " +
                    "            _modelControls.UserContainer.ChangeCaptionFontDecorationEvt += _fliP" +
                    "assword.ChangeCaptionFontDecoration;\r\n                _modelControls.UserContain" +
                    "er.ChangeSizeEvt += _fliPassword.ChangeFontSize;\r\n            }\r\n        }\r\n\r\n  " +
                    "      /// <summary>\r\n        /// Referencia de la alerta del input.\r\n        ///" +
                    " </summary>\r\n        private WoInputAlert? _wiaPassword;\r\n\r\n        /// <summary" +
                    ">\r\n        /// Suscrive los controladores de eventos de la vista a los eventos d" +
                    "el componenrte a través de la referencia..\r\n        /// </summary>\r\n        publ" +
                    "ic void SetStatusWiaPassword()\r\n        {\r\n            if (_wiaPassword != null)" +
                    "\r\n            {\r\n                _modelControls.PasswordAlert.SetAlertValueEvt +" +
                    "= _wiaPassword.SetAlertValue;\r\n                _modelControls.PasswordAlert.Clea" +
                    "rAlertsEvt += _wiaPassword.ClearAlerts;\r\n            }\r\n        }\r\n\r\n        ///" +
                    " <summary>\r\n        /// Evento del componente que se ejecuta cuando se modifica " +
                    "el valor del componente Id.\r\n        /// </summary>\r\n        public void Passwor" +
                    "d_OnChange(String? newValue)\r\n        {\r\n            _scriptsUser.Authenticate.P" +
                    "assword = newValue;\r\n            AuthValidate(\"Password\", _modelControls.Passwor" +
                    "dAlert);\r\n            _scriptsUser.Password_OnChange();\r\n        }\r\n\r\n        #e" +
                    "ndregion Password\r\n\r\n\r\n        #region Instance\r\n\r\n        /// <summary>\r\n      " +
                    "  /// Referencia que representa el componente.\r\n        /// </summary>\r\n        " +
                    "private WoTextEdit<App>? _txtInstance;\r\n\r\n        /// <summary>\r\n        /// Sus" +
                    "cribe los controladores de eventos de la vista del componente a los\r\n        ///" +
                    " eventos del componente a través de la referencia.\r\n        /// </summary>\r\n    " +
                    "    public void SetStatusTxtInstance()\r\n        {\r\n            if (_txtInstance " +
                    "!= null)\r\n            {\r\n                _modelControls.Instance.ChangeEnabledEv" +
                    "t += _txtInstance.ChangeStatus;\r\n                _modelControls.Instance.ChangeS" +
                    "izeEvt += _txtInstance.ChangeFontSize;\r\n\r\n                _modelControls.Instanc" +
                    "e.ChangeControlFontColorEvt += _txtInstance.ChangeControlFontColor;\r\n           " +
                    "     _modelControls.Instance.ChangeControlFontWeightEvt += _txtInstance.ChangeCo" +
                    "ntrolFontWeight;\r\n                _modelControls.Instance.ChangeControlFontItali" +
                    "cEvt += _txtInstance.ChangeControlFontItalic;\r\n                _modelControls.In" +
                    "stance.ChangeControlFontDecorationEvt += _txtInstance.ChangeControlFontDecoratio" +
                    "n;\r\n\r\n                _modelControls.Instance.ChangeBackColorEvt += _txtInstance" +
                    ".ChangeBackgroundColor;\r\n\r\n                _modelControls.Instance.ActualizarCom" +
                    "ponente();\r\n                CheckForm();\r\n            }\r\n        }\r\n\r\n        //" +
                    "/ <summary>\r\n        /// Referencia del contenedor del item\r\n        /// </summa" +
                    "ry>\r\n        private WoFormItem? _fliInstance;\r\n\r\n        public void SetStatusF" +
                    "liInstance()\r\n        {\r\n            if (_fliInstance != null)\r\n            {\r\n " +
                    "               _modelControls.InstanceContainer.ChangeCaptionFontColorEvt += _fl" +
                    "iInstance.ChangeCaptionFontColor;\r\n                _modelControls.InstanceContai" +
                    "ner.ChangeCaptionFontWeightEvt += _fliInstance.ChangeCaptionFontWeight;\r\n       " +
                    "         _modelControls.InstanceContainer.ChangeCaptionFontItalicEvt += _fliInst" +
                    "ance.ChangeCaptionFontItalic;\r\n                _modelControls.InstanceContainer." +
                    "ChangeCaptionFontDecorationEvt += _fliInstance.ChangeCaptionFontDecoration;\r\n   " +
                    "             _modelControls.InstanceContainer.ChangeSizeEvt += _fliInstance.Chan" +
                    "geFontSize;\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Refe" +
                    "rencia de la alerta del input.\r\n        /// </summary>\r\n        private WoInputA" +
                    "lert? _wiaInstance;\r\n\r\n        /// <summary>\r\n        /// Suscrive los controlad" +
                    "ores de eventos de la vista a los eventos del componenrte a través de la referen" +
                    "cia..\r\n        /// </summary>\r\n        public void SetStatusWiaInstance()\r\n     " +
                    "   {\r\n            if (_wiaInstance != null)\r\n            {\r\n                _mod" +
                    "elControls.InstanceAlert.SetAlertValueEvt += _wiaInstance.SetAlertValue;\r\n      " +
                    "          _modelControls.InstanceAlert.ClearAlertsEvt += _wiaInstance.ClearAlert" +
                    "s;\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Evento del co" +
                    "mponente que se ejecuta cuando se modifica el valor del componente Id.\r\n        " +
                    "/// </summary>\r\n        public void Instance_OnChange(String? newValue)\r\n       " +
                    " {\r\n            _scriptsUser.InstanciaUdnAsignar.Instance = newValue;\r\n         " +
                    "   InstanceValidate(\"Instance\", _modelControls.InstanceAlert);\r\n            _scr" +
                    "iptsUser.Instance_OnChange();\r\n        }\r\n\r\n        #endregion Instance\r\n\r\n     " +
                    "   #region Udn\r\n\r\n        /// <summary>\r\n        /// Referencia que representa e" +
                    "l componente.\r\n        /// </summary>\r\n        private WoTextEdit<App>? _txtUdn;" +
                    "\r\n\r\n        /// <summary>\r\n        /// Suscribe los controladores de eventos de " +
                    "la vista del componente a los\r\n        /// eventos del componente a través de la" +
                    " referencia.\r\n        /// </summary>\r\n        public void SetStatusTxtUdn()\r\n   " +
                    "     {\r\n            if (_txtUdn != null)\r\n            {\r\n                _modelC" +
                    "ontrols.Udn.ChangeEnabledEvt += _txtUdn.ChangeStatus;\r\n                _modelCon" +
                    "trols.Udn.ChangeSizeEvt += _txtUdn.ChangeFontSize;\r\n\r\n                _modelCont" +
                    "rols.Udn.ChangeControlFontColorEvt += _txtUdn.ChangeControlFontColor;\r\n         " +
                    "       _modelControls.Udn.ChangeControlFontWeightEvt += _txtUdn.ChangeControlFon" +
                    "tWeight;\r\n                _modelControls.Udn.ChangeControlFontItalicEvt += _txtU" +
                    "dn.ChangeControlFontItalic;\r\n                _modelControls.Udn.ChangeControlFon" +
                    "tDecorationEvt += _txtUdn.ChangeControlFontDecoration;\r\n\r\n                _model" +
                    "Controls.Udn.ChangeBackColorEvt += _txtUdn.ChangeBackgroundColor;\r\n\r\n           " +
                    "     _modelControls.Udn.ActualizarComponente();\r\n                CheckForm();\r\n " +
                    "           }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Referencia del con" +
                    "tenedor del item\r\n        /// </summary>\r\n        private WoFormItem? _fliUdn;\r\n" +
                    "\r\n        public void SetStatusFliUdn()\r\n        {\r\n            if (_fliUdn != n" +
                    "ull)\r\n            {\r\n                _modelControls.UdnContainer.ChangeCaptionFo" +
                    "ntColorEvt += _fliUdn.ChangeCaptionFontColor;\r\n                _modelControls.Ud" +
                    "nContainer.ChangeCaptionFontWeightEvt += _fliUdn.ChangeCaptionFontWeight;\r\n     " +
                    "           _modelControls.UdnContainer.ChangeCaptionFontItalicEvt += _fliUdn.Cha" +
                    "ngeCaptionFontItalic;\r\n                _modelControls.UdnContainer.ChangeCaption" +
                    "FontDecorationEvt += _fliUdn.ChangeCaptionFontDecoration;\r\n                _mode" +
                    "lControls.UdnContainer.ChangeSizeEvt += _fliUdn.ChangeFontSize;\r\n            }\r\n" +
                    "        }\r\n\r\n        /// <summary>\r\n        /// Referencia de la alerta del inpu" +
                    "t.\r\n        /// </summary>\r\n        private WoInputAlert? _wiaUdn;\r\n\r\n        //" +
                    "/ <summary>\r\n        /// Suscrive los controladores de eventos de la vista a los" +
                    " eventos del componenrte a través de la referencia..\r\n        /// </summary>\r\n  " +
                    "      public void SetStatusWiaUdn()\r\n        {\r\n            if (_wiaUdn != null)" +
                    "\r\n            {\r\n                _modelControls.UdnAlert.SetAlertValueEvt += _wi" +
                    "aUdn.SetAlertValue;\r\n                _modelControls.UdnAlert.ClearAlertsEvt += _" +
                    "wiaUdn.ClearAlerts;\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        " +
                    "/// Evento del componente que se ejecuta cuando se modifica el valor del compone" +
                    "nte Id.\r\n        /// </summary>\r\n        public void Udn_OnChange(String? newVal" +
                    "ue)\r\n        {\r\n            _scriptsUser.InstanciaUdnAsignar.Udn = newValue;\r\n  " +
                    "          InstanceValidate(\"Udn\", _modelControls.UdnAlert);\r\n            _script" +
                    "sUser.Udn_OnChange();\r\n        }\r\n\r\n        #endregion Udn\r\n\r\n\r\n        #region " +
                    "Year\r\n\r\n        /// <summary>\r\n        /// Referencia que representa el componen" +
                    "te.\r\n        /// </summary>\r\n        private WoComboEdit<int, App>? _cmbYear;\r\n\r" +
                    "\n        /// <summary>\r\n        /// Suscribe los controladores de eventos de la " +
                    "vista del componente a los\r\n        /// eventos del componente a través de la re" +
                    "ferencia.\r\n        /// </summary>\r\n        public void SetStatusCmbYear()\r\n     " +
                    "   {\r\n            if (_cmbYear != null)\r\n            {\r\n                _modelCo" +
                    "ntrols.Year.ChangeEnabledEvt += _cmbYear.ChangeStatus;\r\n                _modelCo" +
                    "ntrols.Year.ChangeSizeEvt += _cmbYear.ChangeFontSize;\r\n                         " +
                    "      \r\n                _modelControls.Year.ChangeControlFontColorEvt += _cmbYea" +
                    "r.ChangeControlFontColor;\r\n                _modelControls.Year.ChangeControlFont" +
                    "WeightEvt += _cmbYear.ChangeControlFontWeight;\r\n                _modelControls.Y" +
                    "ear.ChangeControlFontItalicEvt += _cmbYear.ChangeControlFontItalic;\r\n           " +
                    "     _modelControls.Year.ChangeControlFontDecorationEvt += _cmbYear.ChangeContro" +
                    "lFontDecoration;\r\n                               \r\n                _modelControl" +
                    "s.Year.ChangeBackColorEvt += _cmbYear.ChangeBackgroundColor;\r\n\r\n                " +
                    "_modelControls.Year.ActualizarComponente();\r\n                CheckForm();\r\n     " +
                    "       }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Referencia del contene" +
                    "dor del item\r\n        /// </summary>\r\n        private WoFormItem? _fliYear;\r\n\r\n " +
                    "       public void SetStatusFliYear()\r\n        {\r\n            if (_fliYear != nu" +
                    "ll)\r\n            {\r\n                _modelControls.YearContainer.ChangeCaptionFo" +
                    "ntColorEvt += _fliYear.ChangeCaptionFontColor;\r\n                _modelControls.Y" +
                    "earContainer.ChangeCaptionFontWeightEvt += _fliYear.ChangeCaptionFontWeight;\r\n  " +
                    "              _modelControls.YearContainer.ChangeCaptionFontItalicEvt += _fliYea" +
                    "r.ChangeCaptionFontItalic;\r\n                _modelControls.YearContainer.ChangeC" +
                    "aptionFontDecorationEvt += _fliYear.ChangeCaptionFontDecoration;\r\n              " +
                    "  _modelControls.YearContainer.ChangeSizeEvt += _fliYear.ChangeFontSize;\r\n      " +
                    "      }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Referencia de la alerta" +
                    " del input.\r\n        /// </summary>\r\n        private WoInputAlert? _wiaYear;\r\n\r\n" +
                    "        /// <summary>\r\n        /// Suscrive los controladores de eventos de la v" +
                    "ista a los eventos del componenrte a través de la referencia..\r\n        /// </su" +
                    "mmary>\r\n        public void SetStatusWiaYear()\r\n        {\r\n            if (_wiaY" +
                    "ear != null)\r\n            {\r\n                _modelControls.YearAlert.SetAlertVa" +
                    "lueEvt += _wiaYear.SetAlertValue;\r\n                _modelControls.YearAlert.Clea" +
                    "rAlertsEvt += _wiaYear.ClearAlerts;\r\n            }\r\n        }\r\n\r\n        /// <su" +
                    "mmary>\r\n        /// Evento del componente que se ejecuta cuando se modifica el v" +
                    "alor del componente Id.\r\n        /// </summary>\r\n        public void Year_OnChan" +
                    "ge(int newValue)\r\n        {\r\n            _scriptsUser.InstanciaUdnAsignar.Year =" +
                    " newValue;\r\n            InstanceValidate(\"Year\", _modelControls.YearAlert);\r\n   " +
                    "         _scriptsUser.Year_OnChange();\r\n        }\r\n\r\n        #endregion Year\r\n\r\n" +
                    "        #region InstanceType\r\n\r\n        /// <summary>\r\n        /// Referencia qu" +
                    "e representa el componente.\r\n        /// </summary>\r\n        private WoComboEdit" +
                    "<tWoIntanciaType, App>? _cmbInstanceType;\r\n\r\n        /// <summary>\r\n        /// " +
                    "Suscribe los controladores de eventos de la vista del componente a los\r\n        " +
                    "/// eventos del componente a través de la referencia.\r\n        /// </summary>\r\n " +
                    "       public void SetStatusTxtInstanceType()\r\n        {\r\n            if (_cmbIn" +
                    "stanceType != null)\r\n            {\r\n                _modelControls.InstanceType." +
                    "ChangeEnabledEvt += _cmbInstanceType.ChangeStatus;\r\n                _modelContro" +
                    "ls.InstanceType.ChangeSizeEvt += _cmbInstanceType.ChangeFontSize;\r\n\r\n           " +
                    "     _modelControls.InstanceType.ChangeControlFontColorEvt += _cmbInstanceType.C" +
                    "hangeControlFontColor;\r\n                _modelControls.InstanceType.ChangeContro" +
                    "lFontWeightEvt += _cmbInstanceType.ChangeControlFontWeight;\r\n                _mo" +
                    "delControls.InstanceType.ChangeControlFontItalicEvt += _cmbInstanceType.ChangeCo" +
                    "ntrolFontItalic;\r\n                _modelControls.InstanceType.ChangeControlFontD" +
                    "ecorationEvt += _cmbInstanceType.ChangeControlFontDecoration;\r\n\r\n               " +
                    " _modelControls.InstanceType.ChangeBackColorEvt += _cmbInstanceType.ChangeBackgr" +
                    "oundColor;\r\n\r\n                _modelControls.InstanceType.ActualizarComponente()" +
                    ";\r\n                CheckForm();\r\n            }\r\n        }\r\n\r\n        /// <summar" +
                    "y>\r\n        /// Referencia del contenedor del item\r\n        /// </summary>\r\n    " +
                    "    private WoFormItem? _fliInstanceType;\r\n\r\n        /// <summary>\r\n        /// " +
                    "Suscrive los controladores de eventos de la vista del componente a los \r\n       " +
                    " /// eventos del componente a través de la referencia.\r\n        /// </summary>\r\n" +
                    "        /// <param name=\"status\"></param>\r\n        public void SetStatusFliInsta" +
                    "nceType()\r\n        {\r\n            if (_fliInstanceType != null)\r\n            {\r\n" +
                    "                _modelControls.InstanceTypeContainer.ChangeCaptionFontColorEvt +" +
                    "= _fliInstanceType.ChangeCaptionFontColor;\r\n                _modelControls.Insta" +
                    "nceTypeContainer.ChangeCaptionFontWeightEvt += _fliInstanceType.ChangeCaptionFon" +
                    "tWeight;\r\n                _modelControls.InstanceTypeContainer.ChangeCaptionFont" +
                    "ItalicEvt += _fliInstanceType.ChangeCaptionFontItalic;\r\n                _modelCo" +
                    "ntrols.InstanceTypeContainer.ChangeCaptionFontDecorationEvt += _fliInstanceType." +
                    "ChangeCaptionFontDecoration;\r\n                _modelControls.InstanceTypeContain" +
                    "er.ChangeSizeEvt += _fliInstanceType.ChangeFontSize;\r\n            }\r\n        }\r\n" +
                    "\r\n        /// <summary>\r\n        /// Referencia de la alerta del input.\r\n       " +
                    " /// </summary>\r\n        private WoInputAlert? _wiaInstanceType;\r\n\r\n        /// " +
                    "<summary>\r\n        /// Suscrive los controladores de eventos de la vista a los e" +
                    "ventos del componenrte a través de la referencia..\r\n        /// </summary>\r\n    " +
                    "    public void SetStatusWiaInstanceType()\r\n        {\r\n            if (_wiaInsta" +
                    "nceType != null)\r\n            {\r\n                _modelControls.InstanceTypeAler" +
                    "t.SetAlertValueEvt += _wiaInstanceType.SetAlertValue;\r\n                _modelCon" +
                    "trols.InstanceTypeAlert.ClearAlertsEvt += _wiaInstanceType.ClearAlerts;\r\n       " +
                    "     }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Evento del componente qu" +
                    "e se ejecuta cuando se modifica el valor del componente InstanceType.\r\n        /" +
                    "// </summary>\r\n        public void InstanceType_OnChange(tWoIntanciaType newValu" +
                    "e)\r\n        {\r\n            _scriptsUser.InstanciaUdnAsignar.InstanceType = newVa" +
                    "lue;\r\n            InstanceValidate(\"InstanceType\", _modelControls.InstanceTypeAl" +
                    "ert);\r\n            _scriptsUser.InstanceType_OnChange();\r\n        }\r\n\r\n        #" +
                    "endregion InstanceType\r\n\r\n         #region btnLogin\r\n\r\n        private WoButton?" +
                    " _btnLogin;\r\n\r\n        /// <summary>\r\n        /// Suscribe los controladores de " +
                    "eventos de la vista del componente a los\r\n        /// eventos del componente a t" +
                    "ravés de la referencia.\r\n        /// </summary>\r\n        public void SetStatusBt" +
                    "nLogin()\r\n        {\r\n            if (_cmbYear != null)\r\n            {\r\n         " +
                    "       _modelControls.LoginButton.ChangeEnabledEvt += _btnLogin.ChangeEnable;\r\n " +
                    "               _modelControls.LoginButton.ChangeSizeEvt += _btnLogin.ChangeFontS" +
                    "ize;\r\n                _modelControls.LoginButton.ChangeFontColorEvt += _btnLogin" +
                    ".ChangeFontColor;\r\n                _modelControls.LoginButton.ChangeFontWeightEv" +
                    "t += _btnLogin.ChangeFontWeight;\r\n                _modelControls.LoginButton.Cha" +
                    "ngeFontItalicEvt += _btnLogin.ChangeFontItalic;\r\n                _modelControls." +
                    "LoginButton.ChangeFontDecorationEvt += _btnLogin.ChangeFontDecoration;\r\n        " +
                    "        _modelControls.LoginButton.ChangeButtonTypeEvt += _btnLogin.ChangeButton" +
                    "Type;\r\n\r\n                _modelControls.LoginButton.ActualizarComponente();\r\n   " +
                    "             CheckForm();\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n  " +
                    "      /// Referencia del contenedor del item\r\n        /// </summary>\r\n        pr" +
                    "ivate WoFormItem? _fliLogin;\r\n\r\n        public void SetStatusFliLogin()\r\n       " +
                    " {\r\n            if (_fliLogin != null)\r\n            {\r\n                _modelCon" +
                    "trols.LoginContainer.ChangeCaptionFontColorEvt += _fliLogin.ChangeCaptionFontCol" +
                    "or;\r\n                _modelControls.LoginContainer.ChangeCaptionFontWeightEvt +=" +
                    " _fliLogin.ChangeCaptionFontWeight;\r\n                _modelControls.LoginContain" +
                    "er.ChangeCaptionFontItalicEvt += _fliLogin.ChangeCaptionFontItalic;\r\n           " +
                    "     _modelControls.LoginContainer.ChangeCaptionFontDecorationEvt += _fliLogin.C" +
                    "hangeCaptionFontDecoration;\r\n                _modelControls.LoginContainer.Chang" +
                    "eSizeEvt += _fliLogin.ChangeFontSize;\r\n            }\r\n        }\r\n\r\n        /// <" +
                    "summary>\r\n        /// Evento del componente que se ejecuta cuando se modifica el" +
                    " valor del componente Id.\r\n        /// </summary>\r\n        public async Task Log" +
                    "in_OnClick(MouseEventArgs e)\r\n        {\r\n            try\r\n            {\r\n       " +
                    "         _scriptsUser.Authenticate.provider = \"credentials\";\r\n                _s" +
                    "criptsUser.Authenticate.RememberMe = true;\r\n\r\n                await Provider.Log" +
                    "in(\r\n                    auth: _scriptsUser.Authenticate,\r\n                    u" +
                    "dnInstance: _scriptsUser.InstanciaUdnAsignar\r\n                );\r\n            }\r" +
                    "\n            catch (Exception ex)\r\n            {\r\n                _scriptsUser.W" +
                    "oLoginControls.Alertas.AgregarAlerta(mensaje: ex.Message);\r\n            }\r\n     " +
                    "   }\r\n\r\n        #endregion btnLogin         \r\n    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 766 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Shared\WoTemplateWoLoginLayoutPartialBlazor.tt"

public string Project { get; set; } = "";

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class WoTemplateWoLoginLayoutPartialBlazorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
