// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del runtime: 17.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WooW.SB.BlazorGenerator.BlazorTemplates.CommonTemplates.Shared
{
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Shared\WoTemplateWoHeaderLayoutRazorBlazor.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class WoTemplateWoHeaderLayoutRazorBlazor : WoTemplateWoHeaderLayoutRazorBlazorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n@*///--------------------------------------------------------------------------" +
                    "----------------------------------------\r\n/// Código autogenerado por la templat" +
                    "e WoTemplateGenericClass en el path WooW.SB\\BlazorGenerator\\BlazorTemplates\\Comm" +
                    "onTemplates\\Shared\\WoTemplateMainLayoutRazorBlazor.tt\r\n/// Genera código consist" +
                    "ente con la version de la prueba de concepto a dia 05-10-2023 En Blazor Wasm y S" +
                    "erver\r\n/// Este código es auto generado y su modificación puede causar que el có" +
                    "digo no se comporte como deveria ademas de\r\n/// que se perderan los cambios real" +
                    "izados en el código al momento de la generación.\r\n///---------------------------" +
                    "--------------------------------------------------------------------------------" +
                    "-------*@\r\n\r\n@using WooW.Blazor.Services\r\n@using Microsoft.Extensions.Localizati" +
                    "on\r\n\r\n@inherits AWoComponentBase\r\n\r\n@inject NavigationManager Navigation\r\n\r\n@inj" +
                    "ect ILocalStorageService LocalStorage\r\n\r\n@inject IStringLocalizer<App> Localizer" +
                    "\r\n\r\n<WoHeader TApp=\"App\">\r\n\r\n    @* Icono/Titulo de la aplicacion *@\r\n    <Title" +
                    "Fragment>\r\n        <img src=\"/assets/images/Logo_transparent.png\" class=\"w-100 h" +
                    "-100 object-fit-fill\" />\r\n    </TitleFragment>\r\n\r\n    @* Componente visible en l" +
                    "a barra del header *@\r\n    <Sessionfragment>\r\n        <AuthorizeView>\r\n         " +
                    "   <Authorized>\r\n                @if (AuthResult != null && SessionData != null)" +
                    "\r\n                {\r\n                    <div class=\"w-100 h-100 d-flex justify-" +
                    "content-center align-items-center\" id=\"mniAccount\">\r\n                        <i " +
                    "class=\"bi bi-person-circle\"></i>\r\n                        &ensp;\r\n              " +
                    "          @SessionData.UserName.ToString()\r\n                    </div>\r\n        " +
                    "        }\r\n            </Authorized>\r\n            <NotAuthorized>\r\n             " +
                    "   <div class=\"tm-8 text-center\" id=\"mniAccount\">\r\n                    <i class=" +
                    "\"bi bi-person-circle\" />\r\n                    &ensp;\r\n                    Log In" +
                    "\r\n                </div>\r\n            </NotAuthorized>\r\n        </AuthorizeView>" +
                    "\r\n    </Sessionfragment>\r\n\r\n    @* Panel que se despliega al hacer click al comp" +
                    "onente en la parte superior *@\r\n    <SessionSubmenu>\r\n        <AuthorizeView>\r\n " +
                    "           <Authorized>\r\n\r\n                <div class=\"w-100 user-profile\">\r\n   " +
                    "                 <div class=\"flex-column align-items-center justify-content-cent" +
                    "er\">\r\n                        <div class=\"logo-container d-flex flex-column alig" +
                    "n-items-center justify-content-center\">\r\n                            <i class=\"b" +
                    "i bi-person-fill fs-3\" />\r\n                            @if (SessionData != null)" +
                    "\r\n                            {\r\n                                <div class=\"tm-" +
                    "8 text-center\">@SessionData.UserName.ToString()</div>\r\n                         " +
                    "   }\r\n                        </div>\r\n                        <div class=\"user-n" +
                    "ame-container px-2 mb-3\">\r\n                            @if (SessionData != null)" +
                    "\r\n                            {\r\n                                <div class=\"d-f" +
                    "lex justify-content-between\">\r\n                                    <i class=\"bi " +
                    "bi-buildings-fill\" />\r\n                                    <label>@SessionData.U" +
                    "dn</label>\r\n                                </div>\r\n                            " +
                    "    <div class=\"d-flex justify-content-between\">\r\n                              " +
                    "      <i class=\"bi bi-database-fill-check\" />\r\n                                 " +
                    "   <label>@SessionData.Instance</label>\r\n                                </div>\r" +
                    "\n                                <div class=\"d-flex justify-content-between\">\r\n " +
                    "                                   <i class=\"bi bi-clock\" />\r\n                  " +
                    "                  <label>@SessionData.Year</label>\r\n                            " +
                    "    </div>\r\n                                <div class=\"d-flex justify-content-b" +
                    "etween\">\r\n                                    <i class=\"bi bi-database-fill-gear" +
                    "\" />\r\n                                    <label>@SessionData.InstanceType</labe" +
                    "l>\r\n                                </div>\r\n                            }\r\n     " +
                    "                   </div>\r\n                        <hr class=\"mx-1\" />\r\n        " +
                    "                <div class=\"d-flex justify-content-evenly pb-2\">\r\n              " +
                    "              <DxButton Id=\"btnLogOut\" IconCssClass=\"bi bi-person-fill-slash\" Cl" +
                    "ick=\"@LogOut_Click\" RenderStyle=\"@ButtonRenderStyle.Secondary\" />\r\n             " +
                    "           </div>\r\n                    </div>\r\n                </div>\r\n\r\n       " +
                    "     </Authorized>\r\n\r\n            <NotAuthorized>\r\n                <div class=\"w" +
                    "-100 d-flex justify-content-center\">\r\n                    <label class=\"p-0 mx-a" +
                    "uto my-2\">No Auth</label>\r\n                </div>\r\n            </NotAuthorized>\r" +
                    "\n\r\n        </AuthorizeView>\r\n    </SessionSubmenu>\r\n\r\n    <ItemsFragment> \r\n    " +
                    "    \r\n        <WoSimpleToolbarItem Id=\"mniRoles\"\r\n                             T" +
                    "App=\"App\"\r\n                             Alignment=\"@eToolbarItemAlignment.Right\"" +
                    "\r\n                             Text=\" \"\r\n                             Tooltip=\"R" +
                    "ol\"\r\n                             Icon=\"@eBoostrapIcons.personvcardfill\"\r\n      " +
                    "                       DropDownVisible=\"@false\"\r\n                             On" +
                    "ClickEvc=\"@RoleDropDownClick\"\r\n                             CssClass=\"rounded-pi" +
                    "ll\">\r\n            <ItemsFragment>\r\n\r\n                <WoHeaderSubItems Items=\"@_" +
                    "roles\"\r\n                                  SelectedItem=\"@_selectedRol\"\r\n        " +
                    "                          SelectedItemChanged=\"@SelectRol\" />\r\n\r\n            </I" +
                    "temsFragment>\r\n        </WoSimpleToolbarItem>\r\n\r\n        <WoSimpleToolbarItem Id" +
                    "=\"mniMenus\"\r\n                             TApp=\"App\"\r\n                          " +
                    "   Alignment=\"@eToolbarItemAlignment.Right\"\r\n                             Text=\"" +
                    " \"\r\n                             Tooltip=\"Menu\"\r\n                             Ic" +
                    "on=\"@eBoostrapIcons.menubuttonfill\"\r\n                             CssClass=\"roun" +
                    "ded-pill\">\r\n            <ItemsFragment>\r\n\r\n                <WoHeaderSubItems Ite" +
                    "ms=\"@_menus\"\r\n                                  SelectedItem=\"@_selectedMenu\"\r\n " +
                    "                                 SelectedItemChanged=\"@SelectMenu\" />\r\n\r\n       " +
                    "     </ItemsFragment>\r\n        </WoSimpleToolbarItem>\r\n\r\n        <WoSimpleToolba" +
                    "rItem Id=\"mniLangs\"\r\n                             TApp=\"App\"\r\n                  " +
                    "           Alignment=\"@eToolbarItemAlignment.Right\"\r\n                           " +
                    "  Text=\" \"\r\n                             Tooltip=\"Idioma\"\r\n                     " +
                    "        Icon=\"@eBoostrapIcons.globeamericas\"\r\n                             CssCl" +
                    "ass=\"rounded-pill\">\r\n            <ItemsFragment>\r\n\r\n                <WoHeaderSub" +
                    "Items Items=\"@_cultures\"\r\n                                  SelectedItem=\"@_sele" +
                    "ctedCulture\"\r\n                                  SelectedItemChanged=\"@ChangeCult" +
                    "ure\" />\r\n\r\n            </ItemsFragment>\r\n        </WoSimpleToolbarItem>\r\n       " +
                    " \r\n        <WoThemeSwitcher TApp=\"App\" />\r\n    </ItemsFragment>\r\n\r\n</WoHeader>\r\n" +
                    "\r\n<WoSimpleMenu RawMenusCol=\"@_rawMenusCol\" TApp=\"App\" />");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class WoTemplateWoHeaderLayoutRazorBlazorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
