// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del runtime: 17.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WooW.SB.BlazorGenerator.BlazorTemplates.CommonTemplates.Themes
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Themes\WoTemplateWoThemeSwitcherPartialBlazor.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class WoTemplateWoThemeSwitcherPartialBlazor : WoTemplateWoThemeSwitcherPartialBlazorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"///------------------------------------------------------------------------------------------------------------------
/// Código autogenerado por la template WoTemplateGenericClass en el path WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Shared\WoTemplateMenuLayoutPartialBlazor.tt
/// Genera código consistente con la version de la prueba de concepto a dia 05-10-2023 En Blazor Wasm y Server
/// Este código es auto generado y su modificación puede causar que el código no se comporte como deveria ademas de
/// que se perderan los cambios realizados en el código al momento de la generación.
///------------------------------------------------------------------------------------------------------------------

using System.Net.Http.Json;

namespace ");
            
            #line 12 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Themes\WoTemplateWoThemeSwitcherPartialBlazor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Project));
            
            #line default
            #line hidden
            this.Write(".Themes\r\n{\r\n    \r\n    public partial class WoThemeSwitcher<TApp>\r\n    {\r\n\r\n      " +
                    "  #region Ciclo de vida\r\n\r\n        /// <summary>\r\n        /// Carga desde el loc" +
                    "al storage los temas y el tema actual\r\n        /// </summary>\r\n        /// <para" +
                    "m name=\"firstRender\"></param>\r\n        /// <returns></returns>\r\n        protecte" +
                    "d override async Task OnAfterRenderAsync(bool firstRender)\r\n        {\r\n         " +
                    "   await base.OnAfterRenderAsync(firstRender);\r\n\r\n            try\r\n            {" +
                    "\r\n                Themes resTem = await LocalStorage.GetItemAsync<Themes>(\"theme" +
                    "s\");\r\n                if (resTem != null)\r\n                {\r\n                  " +
                    "  _themes = resTem.themes;\r\n                }\r\n            }\r\n            catch " +
                    "(Exception)\r\n            {\r\n                //error\r\n            }\r\n\r\n          " +
                    "  try\r\n            {\r\n                _currentTheme = await LocalStorage.GetItem" +
                    "Async<Theme>(\"theme\");\r\n                if (_currentTheme != null)\r\n            " +
                    "    {\r\n                    ChangeTheme(_currentTheme);\r\n                }\r\n     " +
                    "       }\r\n            catch (Exception ex)\r\n            {\r\n                //err" +
                    "or\r\n            }\r\n        }\r\n\r\n        #endregion Ciclo de vida\r\n\r\n\r\n        #r" +
                    "egion Temas\r\n\r\n        /// <summary>\r\n        /// Tema actual\r\n        /// </sum" +
                    "mary>\r\n        private Theme _currentTheme = new Theme();\r\n\r\n        /// <summar" +
                    "y>\r\n        /// Lista de temas\r\n        /// </summary>\r\n        private List<The" +
                    "me> _themes = new List<Theme>();\r\n\r\n        /// <summary>\r\n        /// Metodo qu" +
                    "e se detona al seleccionar un nuevo tema.\r\n        /// Detona el js que actualiz" +
                    "a el link del tema\r\n        /// </summary>\r\n        /// <param name=\"newTheme\"><" +
                    "/param>\r\n        /// <returns></returns>\r\n        private async Task ChangeTheme" +
                    "(Theme newTheme)\r\n        {\r\n            if (newTheme != null)\r\n            {\r\n " +
                    "               _currentTheme = newTheme;\r\n                await LocalStorage.Set" +
                    "ItemAsync(\"theme\", newTheme);\r\n                var themeChange = await JSRuntime" +
                    ".InvokeAsync<object>(\"themeChanger.changeCss\", new object[1] { newTheme.cssCdn }" +
                    ");\r\n            }\r\n        }\r\n\r\n        #endregion Temas\r\n\r\n        #region Carg" +
                    "a de los temas\r\n\r\n        /// <summary>\r\n        /// Carga los temas desde el lo" +
                    "cal storage y en caso de no existir una vercion los descarga\r\n        /// </summ" +
                    "ary>\r\n        /// <returns></returns>\r\n        private async Task LoadThemes()\r\n" +
                    "        {\r\n            try\r\n            {\r\n                Themes resTem = await" +
                    " LocalStorage.GetItemAsync<Themes>(\"themes\");\r\n                if (resTem != nul" +
                    "l)\r\n                {\r\n                    _themes = resTem.themes;\r\n           " +
                    "     }\r\n                else\r\n                {\r\n                    await Downl" +
                    "oadThemes();\r\n                }\r\n            }\r\n            catch (Exception)\r\n " +
                    "           {\r\n                //error\r\n            }\r\n\r\n            StateHasChan" +
                    "ged();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Descarga los temas desde" +
                    " el api de bootswatch\r\n        /// </summary>\r\n        /// <returns></returns>\r\n" +
                    "        public async Task DownloadThemes()\r\n        {\r\n            HttpClient th" +
                    "emesClient = new HttpClient();\r\n            Themes? response = await themesClien" +
                    "t.GetFromJsonAsync<Themes>(\"https://bootswatch.com/api/4.json\");\r\n\r\n            " +
                    "if (response != null)\r\n            {\r\n                _themes = response.themes;" +
                    "\r\n            }\r\n        }\r\n\r\n        #endregion Carga de los temas\r\n\r\n    }\r\n\r\n" +
                    "    #region Clases del tema\r\n\r\n    /// <summary>\r\n    /// Clase principal del te" +
                    "ma: Es la representacion de lo que debuelve el api de bootswatch\r\n    /// </summ" +
                    "ary>\r\n    public class Themes\r\n    {\r\n        public string version { get; set; " +
                    "} = string.Empty;\r\n        public List<Theme> themes { get; set; } = new List<Th" +
                    "eme>();\r\n    }\r\n\r\n    public class Theme\r\n    {\r\n        public string name { ge" +
                    "t; set; } = string.Empty;\r\n        public string description { get; set; } = str" +
                    "ing.Empty;\r\n        public string thumbnail { get; set; } = string.Empty;\r\n     " +
                    "   public string preview { get; set; } = string.Empty;\r\n        public string cs" +
                    "s { get; set; } = string.Empty;\r\n        public string cssMin { get; set; } = st" +
                    "ring.Empty;\r\n        public string cssCdn { get; set; } = string.Empty;\r\n       " +
                    " public string scss { get; set; } = string.Empty;\r\n        public string scssVar" +
                    "iables { get; set; } = string.Empty;\r\n    }\r\n\r\n    #endregion Clases del tema\r\n\r" +
                    "\n}\r\n\r\n \r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 166 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Themes\WoTemplateWoThemeSwitcherPartialBlazor.tt"

public string Project { get; set; } = "";

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class WoTemplateWoThemeSwitcherPartialBlazorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
