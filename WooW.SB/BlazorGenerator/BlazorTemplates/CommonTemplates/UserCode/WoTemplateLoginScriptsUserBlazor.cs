// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del runtime: 17.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WooW.SB.BlazorGenerator.BlazorTemplates.CommonTemplates.UserCode
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\UserCode\WoTemplateLoginScriptsUserBlazor.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class WoTemplateLoginScriptsUserBlazor : WoTemplateLoginScriptsUserBlazorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"
///------------------------------------------------------------------------------------------------------------------
/// Código autogenerado por la template WoTemplateGenericClass en el path WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\UserCode\WoTemplateLoginScriptsUserBlazor.tt
/// Genera código consistente con la version de la prueba de concepto a dia 05-10-2023 En Blazor Wasm y Server
/// Este código es auto generado y su modificación puede causar que el código no se comporte como deveria ademas de
/// que se perderan los cambios realizados en el código al momento de la generación.
///------------------------------------------------------------------------------------------------------------------

using ");
            
            #line 11 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\UserCode\WoTemplateLoginScriptsUserBlazor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Project));
            
            #line default
            #line hidden
            this.Write(".ControlModels;\r\nusing ServiceStack;\r\nusing WooW.Blazor.Resources;\r\nusing WooW.Co" +
                    "re;\r\n\r\nnamespace ");
            
            #line 16 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\UserCode\WoTemplateLoginScriptsUserBlazor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Project));
            
            #line default
            #line hidden
            this.Write(".UserCode\r\n{\r\n    public partial class LoginScriptsUser\r\n    {\r\n        #region I" +
                    "nyección de dependencias\r\n\r\n        /// <summary>\r\n        /// Constructor de la" +
                    " clase con ls instancias que se inyectaran desde el\r\n        /// despachador de " +
                    "dependencias de blazor\r\n        /// </summary>\r\n        /// <param name=\"WoLogin" +
                    "Controls\"></param>\r\n        public LoginScriptsUser(WoLoginControls WoLoginContr" +
                    "ols)\r\n        {\r\n            this.WoLoginControls = WoLoginControls;\r\n        }\r" +
                    "\n\r\n        #endregion Inyección de dependencias\r\n\r\n        #region Instancia de " +
                    "los modelos\r\n\r\n        /// <summary>\r\n        /// DTO que contiene los datos de " +
                    "autenticación.\r\n        /// Que se enviaran al servidor.\r\n        /// </summary>" +
                    "\r\n        public Authenticate Authenticate { get; set; } = new Authenticate();\r\n" +
                    "\r\n        /// <summary>\r\n        /// DTO que contiene los datos de la instancia." +
                    "\r\n        /// Se envía con los datos de la instancia y udn para asignarlos a la " +
                    "sesión.\r\n        /// </summary>\r\n        public WoInstanciaUdnAsignar InstanciaU" +
                    "dnAsignar { get; set; } = new WoInstanciaUdnAsignar();\r\n\r\n        #endregion Ins" +
                    "tancia de los modelos\r\n\r\n        #region Instancia de los controles\r\n\r\n        /" +
                    "// <summary>\r\n        /// Instancia de los controles de la vista.\r\n        /// <" +
                    "/summary>\r\n        public WoLoginControls WoLoginControls { get; set; }\r\n\r\n     " +
                    "   #endregion Instancia de los controles\r\n\r\n\r\n        #region Formulario\r\n\r\n    " +
                    "    /// <summary>\r\n        /// Método de inicio que se detona al iniciar el form" +
                    "ulario.\r\n        /// </summary>\r\n        public async Task FormularioIniciado()\r" +
                    "\n        {\r\n            //Authenticate.UserName = \"admin@email.com\";\r\n          " +
                    "  //Authenticate.Password = \"mypass\";\r\n\r\n            Authenticate.UserName = \"em" +
                    "ployee@email.com\";\r\n            Authenticate.Password = \"p\";\r\n\r\n            Inst" +
                    "anciaUdnAsignar.Instance = \"FRO941024IHA\";\r\n            InstanciaUdnAsignar.Udn " +
                    "= \"INDU\";\r\n            InstanciaUdnAsignar.Year = DateTime.Now.Year;\r\n          " +
                    "  InstanciaUdnAsignar.InstanceType = tWoIntanciaType.DEV;\r\n\r\n            WoLogin" +
                    "Controls.LoginButton.TipoDeBoton(eButtonColor.Success);\r\n            WoLoginCont" +
                    "rols.formModelForm.ColorDeFondo(eGroupColor.Info);\r\n            WoLoginControls." +
                    "formModelForm.ColorDeLetra(eTextColor.White);\r\n            WoLoginControls.formM" +
                    "odelForm.DecoracionDeLetra(eTextDecoration.Underline);\r\n        }\r\n\r\n        #en" +
                    "dregion Formulario\r\n\r\n\r\n        #region Usuario\r\n\r\n        /// <summary>\r\n      " +
                    "  /// Evento on change del input de texto Usuario.\r\n        /// </summary>\r\n    " +
                    "    public async void User_OnChange()\r\n        {\r\n            //Code here\r\n     " +
                    "   }\r\n\r\n        /// <summary>\r\n        /// Evento on focus del input de texto Us" +
                    "uario.\r\n        /// </summary>\r\n        public async void User_OnFocus()\r\n      " +
                    "  {\r\n            \r\n        }\r\n\r\n        /// <summary>\r\n        /// Evento on blu" +
                    "r del input de texto Usuario.\r\n        /// </summary>\r\n        public async void" +
                    " User_OnBlur()\r\n        {\r\n            \r\n        }\r\n\r\n        #endregion Usuario" +
                    "\r\n\r\n        #region Password\r\n\r\n        /// <summary>\r\n        /// Evento on cha" +
                    "nge del input de texto Password.\r\n        /// </summary>\r\n        public async v" +
                    "oid Password_OnChange()\r\n        {\r\n            //Code here\r\n        }\r\n\r\n      " +
                    "  /// <summary>\r\n        /// Evento on focus del input de texto Password.\r\n     " +
                    "   /// </summary>\r\n        public async void Password_OnFocus()\r\n        {\r\n    " +
                    "        \r\n        }\r\n\r\n        /// <summary>\r\n        /// Evento on blur del inp" +
                    "ut de texto Password.\r\n        /// </summary>\r\n        public async void Passwor" +
                    "d_OnBlur()\r\n        {\r\n            \r\n        }\r\n\r\n        #endregion Password\r\n\r" +
                    "\n\r\n        #region Instance\r\n\r\n        /// <summary>\r\n        /// Evento on chan" +
                    "ge del input de texto Instance.\r\n        /// </summary>\r\n        public async vo" +
                    "id Instance_OnChange()\r\n        {\r\n            //Code here\r\n        }\r\n\r\n       " +
                    " /// <summary>\r\n        /// Evento on focus del input de texto Instance.\r\n      " +
                    "  /// </summary>\r\n        public async void Instance_OnFocus()\r\n        {\r\n     " +
                    "       \r\n        }\r\n\r\n        /// <summary>\r\n        /// Evento on blur del inpu" +
                    "t de texto Instance.\r\n        /// </summary>\r\n        public async void Instance" +
                    "_OnBlur()\r\n        {\r\n            \r\n        }\r\n\r\n        #endregion Instance\r\n\r\n" +
                    "        #region UDN\r\n\r\n        /// <summary>\r\n        /// Evento on change del i" +
                    "nput de texto UDN.\r\n        /// </summary>\r\n        public async void Udn_OnChan" +
                    "ge()\r\n        {\r\n            //Code here\r\n        }\r\n\r\n        /// <summary>\r\n  " +
                    "      /// Evento on focus del input de texto UDN.\r\n        /// </summary>\r\n     " +
                    "   public async void Udn_OnFocus()\r\n        {\r\n            \r\n        }\r\n\r\n      " +
                    "  /// <summary>\r\n        /// Evento on blur del input de texto UDN.\r\n        ///" +
                    " </summary>\r\n        public async void Udn_OnBlur()\r\n        {\r\n            \r\n  " +
                    "      }\r\n\r\n        #endregion UDN\r\n        \r\n        #region Year\r\n\r\n        pub" +
                    "lic List<int> Years { get; set; } = new List<int>()\r\n        {\r\n            2019" +
                    ",\r\n            2020,\r\n            2021,\r\n            2022,\r\n            2023,\r\n " +
                    "           2024,\r\n        };\r\n\r\n        /// <summary>\r\n        /// Evento on cha" +
                    "nge del input de texto UDN.\r\n        /// </summary>\r\n        public async void Y" +
                    "ear_OnChange()\r\n        {\r\n            //Code here\r\n        }\r\n\r\n        /// <su" +
                    "mmary>\r\n        /// Evento on focus del input de texto UDN.\r\n        /// </summa" +
                    "ry>\r\n        public async void Year_OnFocus()\r\n        {\r\n            \r\n        " +
                    "}\r\n\r\n        /// <summary>\r\n        /// Evento on blur del input de texto UDN.\r\n" +
                    "        /// </summary>\r\n        public async void Year_OnBlur()\r\n        {\r\n    " +
                    "        \r\n        }\r\n\r\n        #endregion Year\r\n\r\n        #region InstanceType\r\n" +
                    "\r\n        /// <summary>\r\n        /// Evento on change del input de texto UDN.\r\n " +
                    "       /// </summary>\r\n        public async void InstanceType_OnChange()\r\n      " +
                    "  {\r\n            //Code here\r\n        }\r\n\r\n        /// <summary>\r\n        /// Ev" +
                    "ento on focus del input de texto UDN.\r\n        /// </summary>\r\n        public as" +
                    "ync void InstanceType_OnFocus()\r\n        {\r\n            \r\n        }\r\n\r\n        /" +
                    "// <summary>\r\n        /// Evento on blur del input de texto UDN.\r\n        /// </" +
                    "summary>\r\n        public async void InstanceType_OnBlur()\r\n        {\r\n          " +
                    "  \r\n        }\r\n\r\n        #endregion InstanceType\r\n    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 268 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\UserCode\WoTemplateLoginScriptsUserBlazor.tt"

public string Project { get; set; } = "";

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class WoTemplateLoginScriptsUserBlazorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
