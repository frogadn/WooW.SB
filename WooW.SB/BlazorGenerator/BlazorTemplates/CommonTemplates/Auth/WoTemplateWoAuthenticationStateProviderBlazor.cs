// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del runtime: 17.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WooW.SB.BlazorGenerator.BlazorTemplates.CommonTemplates.Auth
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Auth\WoTemplateWoAuthenticationStateProviderBlazor.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class WoTemplateWoAuthenticationStateProviderBlazor : WoTemplateWoAuthenticationStateProviderBlazorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"///------------------------------------------------------------------------------------------------------------------
/// Código autogenerado por la template WoTemplateGenericClass en el path WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Auth\WoTemplateWoAuthenticationStateProviderBlazor.tt
/// Genera código consistente con la version de la prueba de concepto a dia 05-10-2023 En Blazor Wasm y Server
/// Este código es auto generado y su modificación puede causar que el código no se comporte como deveria ademas de
/// que se perderan los cambios realizados en el código al momento de la generación.
///------------------------------------------------------------------------------------------------------------------

using Microsoft.AspNetCore.Components;
using Blazored.LocalStorage;
using Microsoft.AspNetCore.Components.Authorization;
using ServiceStack;
using System.Net.Http.Headers;
using System.Security.Claims;
using WooW.Core;

namespace ");
            
            #line 22 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Auth\WoTemplateWoAuthenticationStateProviderBlazor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Project));
            
            #line default
            #line hidden
            this.Write(".Auth\r\n{\r\n    public class WoAuthenticationStateProvider : AuthenticationStatePro" +
                    "vider, IHasJsonApiClient\r\n    {\r\n       #region Atributos de la clase\r\n\r\n       " +
                    " /// <summary>\r\n        /// Resultado del API al intentar el login.\r\n        ///" +
                    " </summary>\r\n        private AuthenticateResponse? _authResult;\r\n\r\n        /// <" +
                    "summary>\r\n        /// Resultado del API al intentar enviar la UDN.\r\n        /// " +
                    "</summary>\r\n        private WoInstanciaUdnResponse? _udnResult;\r\n\r\n        /// <" +
                    "summary>\r\n        /// Informacion de la seson solo para mostrar.\r\n        /// </" +
                    "summary>\r\n        private SessionData _sessionData { get; set; } = new SessionDa" +
                    "ta();\r\n\r\n        #endregion Atributos de la clase\r\n\r\n        #region Instancias " +
                    "inyectadas\r\n\r\n        /// <summary>\r\n        /// Cliente de Service stack despac" +
                    "hado desde el contenedor de dependencias de blazor.\r\n        /// </summary>\r\n   " +
                    "     public JsonApiClient? Client { get; set; }\r\n\r\n        /// <summary>\r\n      " +
                    "  /// Instancia de la interface de local storage.\r\n        /// </summary>\r\n     " +
                    "   public ILocalStorageService LocalStorage;\r\n\r\n        #endregion Instancias in" +
                    "yectadas\r\n\r\n        #region Constructor de la clase\r\n\r\n        /// <summary>\r\n  " +
                    "      /// Constructor de la clase.\r\n        /// Inyecta instancias desde el desp" +
                    "achador de blazor (Program).\r\n        /// </summary>\r\n        /// <param name=\"c" +
                    "lient\"></param>\r\n        public WoAuthenticationStateProvider(JsonApiClient clie" +
                    "nt, ILocalStorageService localStorage)\r\n        {\r\n            this.Client = cli" +
                    "ent;\r\n            this.LocalStorage = localStorage;\r\n        }\r\n\r\n        #endre" +
                    "gion Constructor de la clase\r\n\r\n        #region Implementación del proveedor de " +
                    "autenticación\r\n\r\n        /// <summary>\r\n        /// Método implementado de el pr" +
                    "oveedor de autenticación.\r\n        /// </summary>\r\n        /// <returns></return" +
                    "s>\r\n        public override async Task<AuthenticationState> GetAuthenticationSta" +
                    "teAsync()\r\n        {\r\n            ClaimsIdentity? identity = new ClaimsIdentity(" +
                    ");\r\n\r\n            try\r\n            {\r\n                if (_authResult is null)\r\n" +
                    "                {\r\n                    _authResult = await LocalStorage.GetItemA" +
                    "sync<AuthenticateResponse>(\"A\");\r\n                    _udnResult = await LocalSt" +
                    "orage.GetItemAsync<WoInstanciaUdnResponse>(\"U\");\r\n                }\r\n           " +
                    "     if (_authResult is null)\r\n                {\r\n                    return new" +
                    " AuthenticationState(new ClaimsPrincipal(identity));\r\n                }\r\n\r\n     " +
                    "           List<Claim> claims = new List<Claim>();\r\n                claims.Add(n" +
                    "ew Claim(ClaimTypes.NameIdentifier, _authResult.SessionId));\r\n                cl" +
                    "aims.Add(new Claim(ClaimTypes.Name, _authResult.UserName));\r\n                cla" +
                    "ims.Add(new Claim(ClaimTypes.Email, _authResult.UserName));\r\n\r\n                f" +
                    "oreach (var role in _authResult.Roles)\r\n                {\r\n                    c" +
                    "laims.Add(new Claim(ClaimTypes.Role, role));\r\n                }\r\n               " +
                    " foreach (var permission in _authResult.Permissions)\r\n                {\r\n       " +
                    "             claims.Add(new Claim(\"perm\", permission, ClaimValueTypes.String, nu" +
                    "ll));\r\n                }\r\n\r\n                identity = new ClaimsIdentity(claims" +
                    ", \"Server authentication\");\r\n            }\r\n            catch (Exception ex)\r\n  " +
                    "          {\r\n                //throw new Exception($@\"Ocurrió un error al compro" +
                    "bar la autenticación: {ex.Message}\");\r\n            }\r\n\r\n            var claimsPr" +
                    "incipal = new ClaimsPrincipal(identity);\r\n            var state = new Authentica" +
                    "tionState(claimsPrincipal);\r\n\r\n            NotifyAuthenticationStateChanged(Task" +
                    ".FromResult(state));\r\n\r\n            return state;\r\n        }\r\n\r\n        #endregi" +
                    "on Implementación del proveedor de autenticación\r\n\r\n        #region Login\r\n\r\n   " +
                    "     /// <summary>\r\n        /// Realiza el login en el API de ServiceStack.\r\n   " +
                    "     /// Utiliza el cliente de ServiceStack para realizar la petición.\r\n        " +
                    "/// asigna la UDN al usuario autenticado a través del método SetUdnAsync.\r\n     " +
                    "   /// </summary>\r\n        /// <param name=\"auth\"></param>\r\n        /// <param n" +
                    "ame=\"udnInstance\"></param>\r\n        /// <returns></returns>\r\n        /// <except" +
                    "ion cref=\"Exception\"></exception>\r\n        public async Task Login(Authenticate " +
                    "auth, WoInstanciaUdnAsignar udnInstance)\r\n        {\r\n            try\r\n          " +
                    "  {\r\n                if (Client != null)\r\n                {\r\n                   " +
                    " /// Envía las credenciales del usuario.\r\n                    _authResult = awai" +
                    "t Client.PostAsync(auth);\r\n\r\n                    if (_authResult.ResponseStatus." +
                    "IsSuccess())\r\n                    {\r\n                        Client.BearerToken " +
                    "= _authResult.BearerToken;\r\n                        Client.GetHttpClient().Defau" +
                    "ltRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", _authRe" +
                    "sult.BearerToken);\r\n                        await SetUdnAsync(udnInstance);\r\n   " +
                    "                 }\r\n                    else\r\n                    {\r\n           " +
                    "             throw new Exception($@\"No se autentico correctamente y no se puede " +
                    "asignar la UDN\");\r\n                    }\r\n                }\r\n                els" +
                    "e\r\n                {\r\n                    throw new Exception($@\"El cliente es n" +
                    "ulo\");\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n    " +
                    "        {\r\n                throw new Exception($@\"Ocurrió un error al realizar e" +
                    "l login: {ex.Message}\");\r\n            }\r\n        }\r\n\r\n        #endregion Login\r\n" +
                    "\r\n        #region Asignación de UDN\r\n\r\n        /// <summary>\r\n        /// Asigna" +
                    " la UDN al usuario autenticado.\r\n        /// Guarda en el local storage el resul" +
                    "tado de la autenticación y de la asignación de la UDN.\r\n        /// </summary>\r\n" +
                    "        /// <param name=\"udnInstance\"></param>\r\n        /// <param name=\"loginTe" +
                    "st\"></param>\r\n        /// <returns></returns>\r\n        /// <exception cref=\"Exce" +
                    "ption\"></exception>\r\n        public async Task SetUdnAsync(WoInstanciaUdnAsignar" +
                    " udnInstance, bool loginTest = false)\r\n        {\r\n            try\r\n            {" +
                    "\r\n                if (_authResult != null)\r\n                {\r\n                 " +
                    "   if (Client != null)\r\n                    {\r\n                        if (_auth" +
                    "Result.ResponseStatus.IsSuccess())\r\n                        {\r\n                 " +
                    "           if(udnInstance.Year == -1)\r\n                                udnInstan" +
                    "ce.Year = DateTime.Now.Year;\r\n\r\n                            /// Envía los datos " +
                    "de la instancia.\r\n                            dynamic result = await Client.Post" +
                    "Async(udnInstance);\r\n\r\n                            _sessionData.UserName = _auth" +
                    "Result.DisplayName;\r\n                            _sessionData.Mail = _authResult" +
                    ".UserName;\r\n                            _sessionData.Instance = udnInstance.Inst" +
                    "ance;\r\n                            _sessionData.Udn = udnInstance.Udn;\r\n        " +
                    "                    _sessionData.Year = udnInstance.Year.ToString();\r\n          " +
                    "                  _sessionData.InstanceType = udnInstance.InstanceType.ToString(" +
                    ");\r\n\r\n                            _udnResult = result;\r\n\r\n                      " +
                    "      if (_udnResult.Result != null)\r\n                            {\r\n           " +
                    "                     await LocalStorage.SetItemAsync(\"S\", _sessionData);\r\n      " +
                    "                          await LocalStorage.SetItemAsync(\"A\", _authResult);\r\n  " +
                    "                              await LocalStorage.SetItemAsync(\"U\", _udnResult);\r" +
                    "\n\r\n                                if (!loginTest)\r\n                            " +
                    "        NotifyAuthenticationStateChanged(GetAuthenticationStateAsync());\r\n      " +
                    "                      }\r\n                            else\r\n                     " +
                    "       {\r\n                                await LocalStorage.RemoveItemAsync(\"A\"" +
                    ");\r\n                                await LocalStorage.RemoveItemAsync(\"U\");\r\n\r\n" +
                    "                                throw new Exception($@\"No se asigno la UDN corre" +
                    "ctamente\");\r\n                            }\r\n                        }\r\n         " +
                    "               else\r\n                        {\r\n                            awai" +
                    "t LocalStorage.RemoveItemAsync(\"A\");\r\n                            await LocalSto" +
                    "rage.RemoveItemAsync(\"U\");\r\n\r\n                            throw new Exception($@" +
                    "\"No se puede asignar la UDN si no se a autenticado primero\");\r\n                 " +
                    "       }\r\n                    }\r\n                    else\r\n                    {" +
                    "\r\n                        throw new Exception($@\"El cliente es nulo\");\r\n        " +
                    "            }\r\n                }\r\n                else\r\n                {\r\n     " +
                    "               await LocalStorage.RemoveItemAsync(\"A\");\r\n                    awa" +
                    "it LocalStorage.RemoveItemAsync(\"U\");\r\n\r\n                    throw new Exception" +
                    "($@\"El authResult es nulo\");\r\n                }\r\n            }\r\n            catc" +
                    "h (Exception ex)\r\n            {\r\n                throw new Exception($@\"Ocurrió " +
                    "un error al intentar asignar la UDN: {ex.Message}\");\r\n            }\r\n        }\r\n" +
                    "\r\n        #endregion Asignación de UDN\r\n\r\n        #region Logout\r\n\r\n        /// " +
                    "<summary>\r\n        /// Elimina los datos de autenticación del local storage.\r\n  " +
                    "      /// y notifica a los componentes que se ha cerrado la sesión.\r\n        ///" +
                    " </summary>\r\n        /// <returns></returns>\r\n        public async Task Logout()" +
                    "\r\n        {\r\n            try\r\n            {\r\n                await LocalStorage." +
                    "RemoveItemAsync(\"A\");\r\n                await LocalStorage.RemoveItemAsync(\"U\");\r" +
                    "\n\r\n                await LocalStorage.ClearAsync();\r\n\r\n                _authResu" +
                    "lt = null;\r\n                _udnResult = null;\r\n\r\n                if (Client != " +
                    "null)\r\n                {\r\n                    Client.UserName = null;\r\n         " +
                    "           Client.SessionId = null;\r\n                    Client.BearerToken = nu" +
                    "ll;\r\n                }\r\n\r\n                NotifyAuthenticationStateChanged(GetAu" +
                    "thenticationStateAsync());\r\n            }\r\n            catch (Exception ex)\r\n   " +
                    "         {\r\n                throw new Exception($@\"Ocurrió un error al intentar " +
                    "asignar la UDN: {ex.Message}\");\r\n            }\r\n        }\r\n\r\n        #endregion " +
                    "Logout\r\n    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 290 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Auth\WoTemplateWoAuthenticationStateProviderBlazor.tt"

public string Project { get; set; } = "";

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class WoTemplateWoAuthenticationStateProviderBlazorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
