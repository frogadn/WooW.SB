// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del runtime: 17.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WooW.SB.BlazorGenerator.BlazorTemplates.CommonTemplates.Auth
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Auth\WoTemplateAWoComponentBaseBlazor.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class WoTemplateAWoComponentBaseBlazor : WoTemplateAWoComponentBaseBlazorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"///------------------------------------------------------------------------------------------------------------------
/// Código autogenerado por la template WoTemplateGenericClass en el path WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Auth\WoTemplateAWoComponentBaseBlazor.tt
/// Genera código consistente con la version de la prueba de concepto a dia 05-10-2023 En Blazor Wasm y Server
/// Este código es auto generado y su modificación puede causar que el código no se comporte como deveria ademas de
/// que se perderan los cambios realizados en el código al momento de la generación.
///------------------------------------------------------------------------------------------------------------------

using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Authorization;
using ServiceStack;
using System.Net.Http.Headers;
using WooW.Core;

namespace ");
            
            #line 16 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Auth\WoTemplateAWoComponentBaseBlazor.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Project));
            
            #line default
            #line hidden
            this.Write(".Auth\r\n{\r\n    public class AWoComponentBase : ComponentBase\r\n    {\r\n     #region " +
                    "Parámetros en cascada\r\n\r\n        /// <summary>\r\n        /// Parámetro en cascada" +
                    " recuperado desde el App.razor.\r\n        /// </summary>\r\n        [CascadingParam" +
                    "eter]\r\n        protected Task<AuthenticationState> AuthenticationStateTask { get" +
                    "; set; }\r\n\r\n        #endregion Parámetros en cascada\r\n\r\n        #region Session " +
                    "Data\r\n\r\n        /// <summary>\r\n        /// Variable de sesión.\r\n        /// Se s" +
                    "alva en el local storage del navegador.\r\n        /// </summary>\r\n        protect" +
                    "ed AuthenticateResponse? AuthResult;\r\n\r\n        /// <summary>\r\n        /// Infor" +
                    "mación de la udn actual.\r\n        /// Se salva en el local storage del navegador" +
                    ".\r\n        /// </summary>\r\n        protected WoInstanciaUdnResponse? UdnResult;\r" +
                    "\n\r\n        /// <summary>\r\n        /// Informacion de la seson solo para mostrar." +
                    "\r\n        /// </summary>\r\n        protected SessionData SessionData { get; set; " +
                    "} = new SessionData();\r\n\r\n        #endregion Session Data\r\n\r\n        #region Ins" +
                    "tancias inyectadas\r\n\r\n        /// <summary>\r\n        /// Inyección del proveedor" +
                    " de autenticación.\r\n        /// </summary>\r\n        [Inject]\r\n        protected " +
                    "WoAuthenticationStateProvider? AuthStateProvider { get; set; }\r\n\r\n        /// <s" +
                    "ummary>\r\n        /// Cliente inyectado desde el contenedor de dependencias de bl" +
                    "azor.\r\n        /// </summary>\r\n        [Inject]\r\n        protected JsonApiClient" +
                    "? Client { get; set; }\r\n\r\n        /// <summary>\r\n        /// Inyección del gesto" +
                    "r de navegación.\r\n        /// </summary>\r\n        [Inject]\r\n        protected Na" +
                    "vigationManager? NavigationManager { get; set; }\r\n\r\n        #endregion Instancia" +
                    "s inyectadas\r\n\r\n        #region Métodos principales\r\n\r\n        /// <summary>\r\n  " +
                    "      /// Retorna el cliente de ServiceStack.\r\n        /// Prevalida si este est" +
                    "a autenticado.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n       " +
                    " public async Task<JsonApiClient?> GetClientAsync()\r\n        {\r\n            try\r" +
                    "\n            {\r\n                string[] instanceData = { \"\" };\r\n\r\n             " +
                    "   if (AuthStateProvider != null && Client != null)\r\n                {\r\n        " +
                    "            try\r\n                    {\r\n                        AuthResult = awa" +
                    "it AuthStateProvider.LocalStorage.GetItemAsync<AuthenticateResponse>(\"A\");\r\n    " +
                    "                    UdnResult = await AuthStateProvider.LocalStorage.GetItemAsyn" +
                    "c<WoInstanciaUdnResponse>(\"U\");\r\n                        SessionData = await Aut" +
                    "hStateProvider.LocalStorage.GetItemAsync<SessionData>(\"S\");\r\n                   " +
                    "     if (UdnResult != null)\r\n                        {\r\n                        " +
                    "    instanceData = UdnResult.Result.Split(\' \');\r\n                        }\r\n    " +
                    "                }\r\n                    catch (Exception ex)\r\n                   " +
                    " {\r\n                        throw new Exception($@\"Not Loged: {ex.Message}\");\r\n " +
                    "                   }\r\n\r\n                    try\r\n                    {\r\n        " +
                    "                if (AuthResult != null)\r\n                        {\r\n            " +
                    "                Client.BearerToken = AuthResult.BearerToken;\r\n                  " +
                    "          Client.GetHttpClient().DefaultRequestHeaders.Authorization = new Authe" +
                    "nticationHeaderValue(\"Bearer\", AuthResult.BearerToken);\r\n                       " +
                    " }\r\n                    }\r\n                    catch (Exception ex)\r\n           " +
                    "         {\r\n                        if (AuthResult != null)\r\n                   " +
                    "     {\r\n                            throw new Exception($@\"La autorización expir" +
                    "o: {ex.Message}\");\r\n                        }\r\n                    }\r\n\r\n        " +
                    "            if (AuthResult != null)\r\n                    {\r\n                    " +
                    "    Client.UserName = AuthResult.UserName;\r\n                        Client.Sessi" +
                    "onId = AuthResult.SessionId;\r\n                    }\r\n                }\r\n        " +
                    "        else\r\n                {\r\n                    throw new Exception($@\"La v" +
                    "ariable AuthStateProvider o el cliente es nulo en en GetClient\");\r\n             " +
                    "   }\r\n\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n        " +
                    "        throw new Exception(ex.Message);\r\n            }\r\n\r\n            return Cl" +
                    "ient;\r\n        }\r\n\r\n        #endregion Métodos principales      \r\n    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 143 "C:\Frog\WooW.SB\WooW.SB\BlazorGenerator\BlazorTemplates\CommonTemplates\Auth\WoTemplateAWoComponentBaseBlazor.tt"

public string Project { get; set; } = "";

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class WoTemplateAWoComponentBaseBlazorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
