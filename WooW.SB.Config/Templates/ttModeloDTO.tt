<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="WooW.Core" #>
<#@ import namespace="WooW.SB.Config" #>
<#@ import namespace="WooW.SB.Config.Enum" #>
<#@ import namespace="WooW.SB.Config.Helpers" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttModeloDTO
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated> 
// ------------------------------------------------------------------------------//
using WooW.Core;
using WooW.Model;
using ServiceStack;
using ServiceStack.DataAnnotations;
using System.Collections.Generic;
using WooW.Resources.Labels;
using WooW.Resources.ModelData;
using WooW.Resources.ModelLabel;
using WooW.Resources.ModelComment;
using Newtonsoft.Json;

namespace WooW.DTO
{


#if DEBUG
#if SERVER<#=modelo.GetRolesList()#>
#endif
    [ValidateIsAuthenticated]
    [Tag("<#=modelo.Id#>s")]
    [Route("/api/<#=modelo.Id#>AutoQuery", "GET")]
    [JsonObject(MemberSerialization.OptOut)]
    public class <#=modelo.Id#>AutoQuery : QueryDb<<#=modelo.Id#>>, IWoInstanciaUdn
    {
    }
#endif

    #if SERVER<#=modelo.GetRolesList()#>
    [AutoApply(Behavior.AuditQuery)]
    #endif
    [ValidateIsAuthenticated]
    [Tag("<#=modelo.Id#>s")]
    [Route("/api/<#=modelo.Id#>List", "GET")]
    [JsonObject(MemberSerialization.OptOut)]
    public class <#=modelo.Id#>List : IWoInstanciaUdn, IWoODataRequest
    {
        public string select { get; set; }
        public string filter { get; set; }
        public string orderby { get; set; }
        public bool count { get; set; }
        public int? top { get; set; }
        public int? skip { get; set; }
        public bool withref { get; set; }
        public string totalizer { get; set; }
    }

    #if SERVER<#=modelo.GetRolesList()#>
    [AutoApply(Behavior.AuditQuery)]
    #endif
    [ValidateIsAuthenticated]
    [Tag("<#=modelo.Id#>s")]
    [Route("/api/<#=modelo.Id#>Get", "GET")]
    [JsonObject(MemberSerialization.OptOut)]
    public class <#=modelo.Id#>Get : IWoInstanciaUdn
    {
        public <#=TipoId#> Id { get; set; }
    }

    #if SERVER<#=modelo.GetRolesList()#>
    [AutoApply(Behavior.AuditQuery)]
    #endif
    [ValidateIsAuthenticated]
    [Tag("<#=modelo.Id#>s")]
    [Route("/api/<#=modelo.Id#>Single", "GET")]
    [JsonObject(MemberSerialization.OptOut)]
    public class <#=modelo.Id#>Single : IWoInstanciaUdn
    {
        public <#=TipoId#> Id { get; set; }
    }

<#  bool bUniqueGet = (modelo.Columnas.Where( e => e.TipoDato == WoTypeData.UniqueGet ).FirstOrDefault() != null);
    if(bUniqueGet) 
    {#>
    #if SERVER<#=modelo.GetRolesList()#>
    [AutoApply(Behavior.AuditQuery)]
    #endif
    [ValidateIsAuthenticated]
    [Tag("<#=modelo.Id#>s")]
    [Route("/api/<#=modelo.Id#>GetBy", "GETBY")]
    [JsonObject(MemberSerialization.OptOut)]
    public class <#=modelo.Id#>GetBy : IWoInstanciaUdn
    {
<#      foreach(ModeloColumna col in modelo.Columnas.Where( e => e.TipoDato == WoTypeData.UniqueGet ).OrderBy( e => e.Orden )) {#>
            <#=col.ToPropertyDTO(modelo, false)#>
<#      } #>
    }
<#  } #>

<#  foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial == 0 ) )
    {#>  
    #if SERVER
    [AutoApply(Behavior.AuditCreate)]<#=modelo.GetRolesTra(tra)#><#=tra.GetPermisos()#>
    #endif
    [ValidateIsAuthenticated]
    [Tag("<#=modelo.Id#>s")]
    [Route("/api/<#=modelo.Id#><#=tra.Id#>", "POST")]
    [AutoPopulate(nameof(<#=modelo.Id#>.WoState), Value = e<#=modelo.Id#>_WoState.<#=modelo.Diagrama.EstadoByNum(tra.EstadoFinal)#>)]
    [WoModelBase(typeof(<#=modelo.Id#>))]
    [JsonObject(MemberSerialization.OptOut)]
    public class <#=modelo.Id#><#=tra.Id#> : IWoInstanciaUdn, IReturn<<#=modelo.Id#>>
    {
        public <#=modelo.Id#><#=tra.Id#>()
        {
<#  foreach(ModeloColumna col in modelo.Columnas.Where( e => (!string.IsNullOrEmpty(e.Default))))  {
            var found = tra.DTO.Columnas.Where( e => e == col.Id ).FirstOrDefault();
            if(found == null)
                continue;
    #>
<#=col.ToDefault()#>
<#  }#>
<#      foreach(var coll in tra.DTO.Colleccion )
        {
            if((!coll.Insertar) && (!coll.Actualizar) && (!coll.Borrar))
                continue;

            var modeloSlave = proyecto.ModeloCol.Modelos.Where( t => t.Id == coll.ModeloId ).FirstOrDefault();
            if(modeloSlave == null)
                continue;

            ModeloColumna colloc = modelo.Columnas.Where(e => e.Id == modeloSlave.Id + "Col").FirstOrDefault();
            if(colloc != null)
            {#>
<#=colloc.ToCollectionDefault(tra.Id)#>
<#          }
        }#>  
        }

<#      foreach(ModeloColumna col in modelo.Columnas.OrderBy( e => e.Orden ) ) {
            var found = tra.DTO.Columnas.Where( e => e == col.Id ).FirstOrDefault();
            if(found == null)
                continue;
            var foundNoEditar = tra.DTO.ColumnasNoEditar.Where( e => e == col.Id ).FirstOrDefault();
            if((col.TipoColumna == WoTypeColumn.Reference) && (col.EsColeccion))
                continue;
        #>
<#=col.ToAttributesDTO()#>
<#      if(foundNoEditar != null)
        {#>
        [WoNoEditar]
<#      }#>
<#=     col.ToPropertyDTO(modelo, false)#>
<#      }
        foreach(var coll in tra.DTO.Colleccion )
        {
            if((!coll.Insertar) && (!coll.Actualizar) && (!coll.Borrar))
                continue;

            var modeloSlave = proyecto.ModeloCol.Modelos.Where( t => t.Id == coll.ModeloId ).FirstOrDefault();
            if(modeloSlave == null)
                continue;

            ModeloColumna colloc = modelo.Columnas.Where(e => e.Id == modeloSlave.Id + "Col").FirstOrDefault();
            if(colloc != null)
            {#>
<#=colloc.ToAttributesDTO()#>
<#          }#>  
        [Reference]
<#          if(coll.Insertar) {#>
        [WoSlaveAllowInsert]
<#           }#>
<#          if(coll.Actualizar) {#>
        [WoSlaveAllowUpdate]
<#           }#>
<#          if(coll.Borrar) {#>
        [WoSlaveAllowDelete]
<#           }#>
        [WoModelBase(typeof(<#=modelo.Id#>))]
        public virtual IList<<#=modeloSlave.Id#><#=tra.Id#>> <#=modeloSlave.Id#>Col { get; set; }
<#      }
#>

    }
<#  }#>  

<#  foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial != 0 ) )
    {#>  
    #if SERVER
    [AutoApply(Behavior.AuditModify)]<#=modelo.GetRolesTra(tra)#><#=tra.GetPermisos()#>
    #endif
    [ValidateIsAuthenticated]
    [Tag("<#=modelo.Id#>s")]
    [Route("/api/<#=modelo.Id#><#=tra.Id#>", "PUT PATCH")]
    [AutoPopulate(nameof(<#=modelo.Id#>.WoState), Value = e<#=modelo.Id#>_WoState.<#=modelo.Diagrama.EstadoByNum(tra.EstadoFinal)#>)]
    [WoModelBase(typeof(<#=modelo.Id#>))]
    [JsonObject(MemberSerialization.OptOut)]
    public class <#=modelo.Id#><#=tra.Id#> : IWoInstanciaUdn, IReturn<<#=modelo.Id#>>
    {
<#      foreach(ModeloColumna col in modelo.Columnas.OrderBy( e => e.Orden ) ) {
            var found = tra.DTO.Columnas.Where( e => e == col.Id ).FirstOrDefault();
            if(found == null)
                continue;
            var foundNoEditar = tra.DTO.ColumnasNoEditar.Where( e => e == col.Id ).FirstOrDefault();
            if((col.TipoColumna == WoTypeColumn.Reference) && (col.EsColeccion))
                continue;
#>
<#=col.ToAttributesDTO()#>
<#      if(foundNoEditar != null)
        {#>
        [WoNoEditar]
<#     }#>
<#=     col.ToPropertyDTO(modelo, true)#>
<#      }

        foreach(var coll in tra.DTO.Colleccion )
        {
            if((!coll.Insertar) && (!coll.Actualizar) && (!coll.Borrar))
                continue;

            var modeloSlave = proyecto.ModeloCol.Modelos.Where( t => t.Id == coll.ModeloId ).FirstOrDefault();
            if(modeloSlave == null)
                continue;

            ModeloColumna colloc = modelo.Columnas.Where(e => e.Id == modeloSlave.Id + "Col").FirstOrDefault();
            if(colloc != null)
            {#>
<#=colloc.ToAttributesDTO()#>
<#          }#>  
        [Reference]
        [WoReferenceBase(typeof(<#=modelo.Id#>))]
<#          if(coll.Insertar) {#>
        [WoSlaveAllowInsert]
<#           }#>
<#          if(coll.Actualizar) {#>
        [WoSlaveAllowUpdate]
<#           }#>
<#          if(coll.Borrar) {#>
        [WoSlaveAllowDelete]
<#           }#>
        public virtual IList<<#=modeloSlave.Id#><#=tra.Id#>> <#=modeloSlave.Id#>Col { get; set; }
<#      }
#>

    }

<#  }#>  

<#  foreach(Transicion tra in modelo.Diagrama.Transiciones )
    {
        foreach(var coll in tra.DTO.Colleccion )
        {
            if((!coll.Insertar) && (!coll.Actualizar) && (!coll.Borrar))
                continue;

            var modeloSlave = proyecto.ModeloCol.Modelos.Where( t => t.Id == coll.ModeloId ).FirstOrDefault();
            if(modeloSlave == null)
                continue;
    #>  
    [WoModelBase(typeof(<#=modeloSlave.Id#>))]
    [JsonObject(MemberSerialization.OptOut)]
    public class <#=modeloSlave.Id#><#=tra.Id#> : IWoTypeOfSlaveDTO
    {
        public <#=modeloSlave.Id#><#=tra.Id#>()
        {
<#  foreach(ModeloColumna col in modeloSlave.Columnas.Where( e => (!string.IsNullOrEmpty(e.Default)) || e.EsColeccion))  {
                var found = coll.Columnas.Where( e => e == col.Id ).FirstOrDefault();
                if(found == null)
                    continue;
        if(col.EsColeccion)
        {#>
<#=col.ToCollectionDefault(string.Empty)#>
<#      }
        else 
        {#>
<#=col.ToDefault()#>
<#      }
     }#>
        }

<#          foreach(ModeloColumna col in modeloSlave.Columnas.OrderBy( e => e.Orden ) ) {
                var found = coll.Columnas.Where( e => e == col.Id ).FirstOrDefault();
                if(found == null)
                    continue;
                var foundNoEditar = coll.ColumnasNoEditar.Where( e => e == col.Id ).FirstOrDefault();
#>
<#=col.ToAttributesDTO()#>
<#      if(foundNoEditar != null)
        {#>
        [WoNoEditar]
<#      }#>
        <#=col.ToPropertyDTO(modeloSlave, true)#>
<#      }#>
    }
<#      }
    }

    if(modelo.bPostCondicionesExist)
    {
        foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => ((modelo.TipoModelo == WoTypeModel.TransactionContable) && (e.EstadoFinal == 300)) ))  // Contabilizado
        {#>
    #if SERVER<#=modelo.GetRolesTra(tra)#>
#endif
    [ValidateIsAuthenticated]
    [Tag("<#=modelo.Id#>s")]
    [Route("/api/<#=modelo.Id#>PolizaPrevia")]
    [JsonObject(MemberSerialization.OptOut)]
    public class <#=modelo.Id#>PolizaPrevia : IWoInstanciaUdn
    {
        public string Id { get; set; }
    }

<#   }
}#>  
<#      if ((modelo.TipoModelo == WoTypeModel.CatalogType) ||
            (modelo.TipoModelo == WoTypeModel.Catalog) ||
            (modelo.TipoModelo == WoTypeModel.Control) ||
            (modelo.TipoModelo == WoTypeModel.DataMart))
        {#>
#if SERVER<#=modelo.GetRoles()#>
    [RequiresAnyPermission(nameof(Permiso.WoCatalogoBorrar))]
#endif
    [ValidateIsAuthenticated]
    [Tag("<#=modelo.Id#>s")]
    [Route("/api/<#=modelo.Id#>Borrar", "DELETE")]
    [JsonObject(MemberSerialization.OptOut)]
    public class <#=modelo.Id#>Borrar : IWoInstanciaUdn, IReturn<<#=modelo.Id#>>
    {
        public <#=TipoId#> Id { get; set; }
    }
<#      }#>  
}
<#+
public Modelo modelo { get; set; }  
public string TipoId { get; set; }
public Proyecto proyecto { get; set; }  
#>