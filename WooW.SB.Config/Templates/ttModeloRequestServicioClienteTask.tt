<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="WooW.SB.Config" #>
<#@ import namespace="WooW.SB.Config.Enum" #>
<#@ import namespace="WooW.SB.UI.EnumExtension" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttModeloRequestServicioClienteTask
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated> 
// ------------------------------------------------------------------------------//
<#  
    if (modelo.ScriptRequest.Coleccion) { 
        locResponse = $"IList<{responseObject}>";
    } else {
        locResponse = $"{responseObject}";
    }
#>
using WooW.Core;  
using WooW.DTO;
using ServiceStack;
using Newtonsoft.Json;

using WooW.Core;
using WooW.DTO;
using ServiceStack;
using Newtonsoft.Json;  

namespace WooW.Model
{
    public partial class <#=modelo.Id#>
    {
        public static <#=locResponse#> Post(
            JsonApiClient Client, <#=modelo.Id#> Request, int SecondTimeOut = 600)
        {
            string BackGroundId = <#=modelo.Id#>.DoBackGround(Client, Request);

            <#=locResponse#> response = null;

            DateTime now = DateTime.Now;

            for (int i = 0; ; i++) // 
            {
                Thread.Sleep(2000);

                response = <#=modelo.Id#>.BackGroundResult(Client, new <#=modelo.Id#>BackGround()
                {
                    BackGroundId = BackGroundId
                });

                if (response != null)
                    break;

                if((DateTime.Now - now).TotalSeconds > SecondTimeOut)
                    break;
            }
            return response;
        }


        public static async Task<<#=locResponse#>> PostAsync(
            JsonApiClient Client, <#=modelo.Id#> Request, int SecondTimeOut = 600)
        {
            string BackGroundId = await <#=modelo.Id#>.DoBackGroundAsync(Client, Request);

            <#=locResponse#> response = null;

            DateTime now = DateTime.Now;

            for (int i = 0; ; i++) // 
            {
                Thread.Sleep(2000);

                response = await <#=modelo.Id#>.BackGroundResultAsync(Client, new <#=modelo.Id#>BackGround()
                {
                    BackGroundId = BackGroundId
                });

                if (response != null)
                    break;

                if((DateTime.Now - now).TotalSeconds > SecondTimeOut)
                    break;
            }

            return response;
        }

        public static string DoBackGround(
            JsonApiClient Client, <#=modelo.Id#> Request)
        {
            return Client.Send<string>(Request);
        }

        public static <#=locResponse#> BackGroundResult(
            JsonApiClient Client, <#=modelo.Id#>BackGround Request)
        {

            string s = Client.Send<string>(Request);

            WoBackGround backgroundResult = JsonConvert.DeserializeObject<WoBackGround>(s);

            if (backgroundResult.IsCompleted)
            {
                if (backgroundResult.IsError)
                    throw new Exception(backgroundResult.Error);
                return JsonConvert.DeserializeObject<<#=locResponse#>>(backgroundResult.Result);
            }
            else
                return null;
        }  

        public static async Task<string> DoBackGroundAsync(
            JsonApiClient Client, <#=modelo.Id#> Request)
        {
            return await Client.SendAsync<string>(Request);
        }

        public static async Task<<#=locResponse#>> BackGroundResultAsync(
            JsonApiClient Client, <#=modelo.Id#>BackGround Request)
        {

            string s = await Client.SendAsync<string>(Request);

            WoBackGround backgroundResult = JsonConvert.DeserializeObject<WoBackGround>(s);

            if (backgroundResult.IsCompleted)
            {
                if (backgroundResult.IsError)
                    throw new Exception(backgroundResult.Error);
                return JsonConvert.DeserializeObject<<#=locResponse#>>(backgroundResult.Result);
            }
            else
                return null;
        }

    }
}
<#+
public Modelo modelo { get; set; }  
public string responseObject { get; set; }  
public string locResponse { get; set; }
#>