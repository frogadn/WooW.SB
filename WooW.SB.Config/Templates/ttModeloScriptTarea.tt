<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Text;
using System.Linq;
using System.Collections.Generic;
using ServiceStack;
using ServiceStack.OrmLite;
using WooW.Core.Server;
using WooW.Core;
using WooW.DTO;
using WooW.Model;
using Newtonsoft.Json;


namespace WooW.Model
{
    //
    // Parametro <#=request.Id#> request
    // Parametro <#=responseId#> response
    //
    // No modifique las estructura de la llamada del metodo
    // Pude agregar a la clase propiedades, metodos o funciones
    //
    // Generado por ttModeloScriptTarea
    //
    public class <#=request.Id#>Script
    {
        // Método para el request <#=request.Id#> 
<#  if(coleccion)
    {#>
        public IList<RES> <#=request.Id#>Do<REQ, RES>(WoTargetConnection woTargetNotUse, REQ req<#=request.Id#> )
<#  }
    else
    {#>
        public RES <#=request.Id#>Do<REQ, RES>(WoTargetConnection woTargetNotUse, REQ req<#=request.Id#> )
<#  }#>
            where REQ : <#=request.Id#>, new()
            where RES : <#=responseId#>, new()
        {

			WoTargetConnection woTarget = new WoTargetConnection(woTargetNotUse);

            var response = new RES()
            {
                Respuesta = true,
                NumeroErrores = 0
            };
            
			try
            {
                var dbTrans = woTarget.Db.OpenTransaction();
	
			    try
			    {

                    // Tu código aquí


	                dbTrans.Commit();
			    } 
			    catch (Exception ex)
			    {
				    dbTrans.Rollback();
					response.Error = "Error: " + ex.Message + " " + ex.InnerException?.Message ?? string.Empty;
					response.Respuesta = false;
					response.NumeroErrores = 1;
			    }
			} finally {
                woTarget.Dispose();
            }

            return response;
        }

        // ------------------------------------------------------------------------------
        // <auto-generated>
        //     No modifique este rutina 
        //     Versión del runtime: 1.0.0.0
        // </auto-generated>
        // ------------------------------------------------------------------------------//
        public void <#=request.Id#>Task<REQ, RES>(WoTargetConnection woTarget, REQ req<#=request.Id#> )
            where REQ : <#=request.Id#>, new()
            where RES : <#=responseId#>, new()
        {
            WoBackGroundCache tc = WoBackGroundCache.getInstance();
            WoBackGround t = tc.Get(woTarget.BackGroundId);

            try
            {
                var Result = JsonConvert.SerializeObject(<#=request.Id#>Do<REQ, RES>(woTarget, req<#=request.Id#>));
                tc.Complete(woTarget.BackGroundId, Result);
            }
            catch (Exception ex)
            {
                tc.CompleteError(woTarget.BackGroundId, "Error en <#=request.Id#>Do " + ex.Message);
            }
        }

    }
}
<#+
public Modelo request { get; set; }  
public string responseId { get; set; }  
public bool coleccion { get; set; }  
#>