<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="WooW.Core" #>
<#@ import namespace="WooW.SB.Config" #>
<#@ import namespace="WooW.SB.Config.Enum" #>
// ------------------------------------------------------------------------------
// <auto-generated> 
//     Este código fue generado por una herramienta. WooW.SB ttModelo
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------//
using System; 
using System.Runtime.Serialization;
using ServiceStack;
using ServiceStack.DataAnnotations;
using WooW.Core;
<# if ((!string.IsNullOrEmpty(modelo.Interface1)) || (!string.IsNullOrEmpty(modelo.Interface2)) || (!string.IsNullOrEmpty(modelo.Interface3))) { #>
using WooW.Interface;
<# } #>
using WooW.Resources.Labels;
using WooW.Resources.ModelData;
using WooW.Resources.ModelLabel;
using WooW.Resources.ModelComment;
using Newtonsoft.Json;


#nullable disable

namespace WooW.Model
{

<# if ((modelo.TipoModelo != WoTypeModel.CatalogSlave)
       && (modelo.TipoModelo != WoTypeModel.TransactionSlave)      
       && (modelo.TipoModelo != WoTypeModel.Request)      
       && (modelo.TipoModelo != WoTypeModel.Response)      
       && (modelo.TipoModelo != WoTypeModel.Class)      
       ) { #>
    [EnumAsInt]
    public enum e<#=modelo.Id#>_WoState
    {
<#      bool bInicio = true;
        foreach(Estado estado in modelo.Diagrama.Estados.OrderBy( e => e.NumId ) ) {
            if(bInicio) {#>
        <#=estado.Id#> = <#=estado.NumId#>
<#      } else {#>
        , <#=estado.Id#> = <#=estado.NumId#>
<#      }
        bInicio=false;#>
<#      }#>
    }
<# }#>

<#  foreach(ModeloColumna col in modelo.Columnas.Where( e => ((e.TipoColumna == WoTypeColumn.EnumInt && e.ModeloId == "")))) {
    #>
    [EnumAsInt]
    public enum e<#=modelo.Id#>_<#=(col.EsColeccion ? col.Id.Substring(0, col.Id.Length - 3) : col.Id)#>
    {
        <#=col.ToEnumInt()#>        
    }
<#  }#>

<#  foreach(ModeloColumna col in modelo.Columnas.Where( e => ((e.TipoColumna == WoTypeColumn.EnumString) && (e.ModeloId == ""))))  {
    #>
    public enum e<#=modelo.Id#>_<#=(col.EsColeccion ? col.Id.Substring(0, col.Id.Length - 3) : col.Id)#>
    {
        <#=col.ToEnumString()#>        
    }
<#  }#>
<#=modelo.ToAttributes(bClient)#>
    public <#=IsStatic#>partial class <#=modelo.Id#> <#=ParentClass#>
    {
<#  if(modelo.SubTipoModelo != WoSubTypeModel.Static)
    {#>
        public <#=modelo.Id#>()
        {
<#  foreach(ModeloColumna col in modelo.Columnas.Where( e => (!string.IsNullOrEmpty(e.Default)) || e.EsColeccion))  {
        if(col.EsColeccion)
        {#>
<#=col.ToCollectionDefault(string.Empty)#>
<#      }
        else 
        {#>
<#=col.ToDefault()#>
<#      }
     }#>
        }
<#  }#>

<#     if ((modelo.TipoModelo == WoTypeModel.CatalogSlave)
          || (modelo.TipoModelo == WoTypeModel.TransactionSlave)) { #>

        [Ignore]
        [IgnoreDataMember]
        public override WoSlaveAccionEnum SlaveAccion { get; set; }
<#    }#>
<#  foreach(ModeloColumna col2 in modelo.Columnas.OrderBy( e => e.Orden ) ) {
    #>
<#=col2.ToAttributes()#>
        <#=col2.ToProperty(modelo)#>
<#  }#>
    }
<#  if((modelo.TipoModelo == WoTypeModel.Request) && (modelo.ScriptRequest.EjecutarEnBackGround))
    {#>

    <#=modelo.ToAttributes(bClient, "BackGround")#>
    public partial class <#=modelo.Id#>BackGround <#=ParentClass#>
    {
        public string BackGroundId { get; set; }

        public <#=modelo.Id#>BackGround()
        {
        }
    }
<#  }#>
}
<#+
public Modelo modelo { get; set; }  
public Proyecto proyecto { get; set; }  
public string ParentClass { get; set; }  
public string IsStatic { get; set; }  
public bool bClient { get; set; }  
#>