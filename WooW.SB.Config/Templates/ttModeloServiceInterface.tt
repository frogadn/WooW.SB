<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="WooW.Core" #>
<#@ import namespace="WooW.SB.Config" #>
<#@ import namespace="WooW.SB.Config.Enum" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttModeloServiceInterface
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------//
using WooW.Core.Server;
using WooW.Core;
using WooW.Core.Common;
using WooW.DTO;
using WooW.Model;
using ServiceStack;
using ServiceStack.OrmLite;

namespace WooW.ServiceInterface
{
    public class <#=modelo.Id#>ServiceInterface : Service
    {
        public IAutoQueryDb AutoQuery { get; set; }

#if DEBUG
        public object Get(<#=modelo.Id#>AutoQuery query)
        {
            var wotarget = new WoTargetConnection(Request, Db);
            var queryResult = AutoQuery.CreateQuery(query, Request, wotarget.Db);
            return AutoQuery.Execute(query, queryResult, wotarget.Db);
        }
#endif


<#      if (modelo.TipoModelo != WoTypeModel.Parameter) 
        {#>
        public WoODataResponse<dynamic> Get(<#=modelo.Id#>List ODataRequest)
        {
            return WoGenericService.ODataGet<<#=modelo.Id#>>(new WoTargetConnection(Request, Db), Request, ODataRequest, true);
        }
<#      }#>

        public <#=modelo.Id#> Get(<#=modelo.Id#>Get GetRequest)
        {
<#      if (modelo.TipoModelo != WoTypeModel.Parameter) 
        {#>
            return <#=modelo.Id#>.Get(new WoTargetConnection(Request, Db), GetRequest, WoGetFlags.FillLookUpDescription | WoGetFlags.ApplyFilter);
<#      }
        else 
        {#>
            return <#=modelo.Id#>.Get(new WoTargetConnection(Request, Db), WoGetFlags.FillLookUpDescription | WoGetFlags.ApplyFilter);
<#      }#>
        }

        public <#=modelo.Id#> Get(<#=modelo.Id#>Single SingleRequest)
        {
<#      if (modelo.TipoModelo != WoTypeModel.Parameter) 
        {#>
            return <#=modelo.Id#>.Single(new WoTargetConnection(Request, Db), SingleRequest, WoGetFlags.FillLookUpDescription | WoGetFlags.ApplyFilter);
<#      }
        else 
        {#>
            return <#=modelo.Id#>.Single(new WoTargetConnection(Request, Db), WoGetFlags.FillLookUpDescription | WoGetFlags.ApplyFilter);
<#      }#>
        }



<#      if ((modelo.TipoModelo != WoTypeModel.Control)
            && (modelo.TipoModelo != WoTypeModel.Kardex)
            && (modelo.TipoModelo != WoTypeModel.DataMart) ) 
        {

            foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial == 0 && ((e.Tipo == eTransicionTipo.Local ) || (e.Tipo == eTransicionTipo.Publica ))  ) )
            {#>
        public <#=modelo.Id#> Post(<#=modelo.Id#><#=tra.Id#> dtoRequest)
        {
            return <#=modelo.Id#>.Post(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public <#=modelo.Id#>[] Post(<#=modelo.Id#><#=tra.Id#>[] dtoRequests)
        {
            var list = new List<<#=modelo.Id#>>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(<#=modelo.Id#>.Post(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

<#          }

            foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial != 0 && ((e.Tipo == eTransicionTipo.Local ) || (e.Tipo == eTransicionTipo.Publica ))  ) )
            {
                Estado estado = modelo.Diagrama.Estados.Where( es => es.NumId == tra.EstadoFinal ).FirstOrDefault();

                if(estado == null)
                    throw new Exception($"No se encontró el estado {tra.EstadoFinal} para el modelo {modelo.Id} transición {tra.Id}");

                if(estado.Tipo == eEstadoTipo.FinalAlternativo) 
                {#>
        public <#=modelo.Id#> Put(<#=modelo.Id#><#=tra.Id#> dtoRequest)
        {
            return <#=modelo.Id#>.SoftDelete(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public <#=modelo.Id#>[] Post(<#=modelo.Id#><#=tra.Id#>[] dtoRequests)
        {
            var list = new List<<#=modelo.Id#>>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(<#=modelo.Id#>.SoftDelete(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

        <#      }
                else
                { #>
        public <#=modelo.Id#> Patch(<#=modelo.Id#><#=tra.Id#> dtoRequest)
        {
            return <#=modelo.Id#>.Patch(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public <#=modelo.Id#> Put(<#=modelo.Id#><#=tra.Id#> dtoRequest)
        {
            return <#=modelo.Id#>.Put(new WoTargetConnection(Request, Db), dtoRequest);
        }

        public <#=modelo.Id#>[] Post(<#=modelo.Id#><#=tra.Id#>[] dtoRequests)
        {
            var list = new List<<#=modelo.Id#>>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(<#=modelo.Id#>.Put(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }

<#              }
            }
           if(modelo.bPostCondicionesExist) {
                foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => ((modelo.TipoModelo == WoTypeModel.TransactionContable) && (e.EstadoFinal == 300)) && ((e.Tipo == eTransicionTipo.Local ) || (e.Tipo == eTransicionTipo.Publica )))) // Contabilizado
                {#>
        public WoConPolizaRegistraYAfectar Get(<#=modelo.Id#>PolizaPrevia PolizaPreviaRequest)
        {
            return <#=modelo.Id#>.PolizaPrevia(new WoTargetConnection(Request, Db), PolizaPreviaRequest);
        }
<#              }
            }
        }#>


<#      if ((modelo.TipoModelo == WoTypeModel.CatalogType) ||
            (modelo.TipoModelo == WoTypeModel.Catalog))
        {#>
        public <#=modelo.Id#> Delete(<#=modelo.Id#>Borrar dtoRequest)
        {
            return <#=modelo.Id#>.Delete(new WoTargetConnection(Request, Db), dtoRequest);  
        }

        public <#=modelo.Id#>[] Post(<#=modelo.Id#>Borrar[] dtoRequests)
        {
            var list = new List<<#=modelo.Id#>>();
            var woTarget = new WoTargetConnection(Request, Db);

            using (var dbTrans = woTarget.Db.OpenTransaction())
            {
                try
                {
                    foreach (var dtoRequest in dtoRequests)
                        list.Add(<#=modelo.Id#>.Delete(woTarget, dtoRequest));

                    dbTrans.Commit();
                }

                catch (Exception ex)
                {
                    dbTrans.Rollback();
                    throw ex;
                }
            }
            return list.ToArray();
        }
<#      }#>
    }
}
<#+
public Modelo modelo { get; set; }  
#>