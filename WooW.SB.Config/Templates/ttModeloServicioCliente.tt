<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="WooW.Core" #>
<#@ import namespace="WooW.SB.Config" #>
<#@ import namespace="WooW.SB.Config.Enum" #>
<#@ import namespace="WooW.SB.UI.EnumExtension" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttModeloServicioCliente
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated> 
// ------------------------------------------------------------------------------//
using WooW.Core;
using WooW.Core.Common;
using WooW.DTO; 
using ServiceStack;

namespace WooW.Model
{
    public partial class <#=modelo.Id#>
    {

        public static WoODataResponse<<#=modelo.Id#>> List(
            JsonApiClient Client, <#=modelo.Id#>List GetRequest)
        {
            return Client.Send<WoODataResponse<<#=modelo.Id#>>>(GetRequest);
        }

        public static async Task<WoODataResponse<<#=modelo.Id#>>> ListAsync(
            JsonApiClient Client, <#=modelo.Id#>List GetRequest)
        {
            return await Client.SendAsync<WoODataResponse<<#=modelo.Id#>>>(GetRequest);
        }

        public static <#=modelo.Id#> Get(
            JsonApiClient Client, <#=modelo.Id#>Get GetRequest)
        {
            return Client.Send<<#=modelo.Id#>>(GetRequest);
        }

        public static async Task<<#=modelo.Id#>> GetAsync(
            JsonApiClient Client, <#=modelo.Id#>Get GetRequest)
        {
            return await Client.SendAsync<<#=modelo.Id#>>(GetRequest);
        }

        public static <#=modelo.Id#> Get(
            JsonApiClient Client, <#=TipoId#> Id)
        {
            return Client.Send<<#=modelo.Id#>>(
                new <#=modelo.Id#>Get()
                {
                    Id = Id
                });
        }


        public static <#=modelo.Id#> GetCheck(
            JsonApiClient Client, <#=TipoId#> Id)
        {
            var o<#=modelo.Id#> = Client.Send<<#=modelo.Id#>>(
                new <#=modelo.Id#>Get()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(o<#=modelo.Id#>, Id);

            return o<#=modelo.Id#>;
        }

        public static async Task<<#=modelo.Id#>> GetAsync(
            JsonApiClient Client, <#=TipoId#> Id)
        {
            return await Client.SendAsync<<#=modelo.Id#>>(
                new <#=modelo.Id#>Get()
                {
                    Id = Id
                });
        }

        public static async Task<<#=modelo.Id#>> GetCheckAsync(
            JsonApiClient Client, <#=TipoId#> Id)
        {
            var o<#=modelo.Id#> = await Client.SendAsync<<#=modelo.Id#>>(
                new <#=modelo.Id#>Get()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(o<#=modelo.Id#>, Id);

            return o<#=modelo.Id#>;
        }
        

        public static <#=modelo.Id#> Single(
            JsonApiClient Client, <#=modelo.Id#>Single SingleRequest)
        {
            return Client.Send<<#=modelo.Id#>>(SingleRequest);
        }

        public static async Task<<#=modelo.Id#>> SingleAsync(
            JsonApiClient Client, <#=modelo.Id#>Single SingleRequest)
        {
            return await Client.SendAsync<<#=modelo.Id#>>(SingleRequest);
        }


        public static <#=modelo.Id#> Single(
            JsonApiClient Client, <#=TipoId#> Id)
        {
            return Client.Send<<#=modelo.Id#>>(
                new <#=modelo.Id#>Single()
                {
                    Id = Id
                });
        }


        public static <#=modelo.Id#> SingleCheck(
            JsonApiClient Client, <#=TipoId#> Id)
        {
            var o<#=modelo.Id#> = Client.Send<<#=modelo.Id#>>(
                new <#=modelo.Id#>Single()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(o<#=modelo.Id#>, Id);

            return o<#=modelo.Id#>;
        }

        public static async Task<<#=modelo.Id#>> SingleAsync(
            JsonApiClient Client, <#=TipoId#> Id)
        {
            return await Client.SendAsync<<#=modelo.Id#>>(
                new <#=modelo.Id#>Single()
                {
                    Id = Id
                });
        }

        public static async Task<<#=modelo.Id#>> SingleCheckAsync(
            JsonApiClient Client, <#=TipoId#> Id)
        {
            var o<#=modelo.Id#> = await Client.SendAsync<<#=modelo.Id#>>(
                new <#=modelo.Id#>Single()
                {
                    Id = Id
                });

            WoGetExcepcion.CheckIfNullThenExcept(o<#=modelo.Id#>, Id);

            return o<#=modelo.Id#>;
        }



<#  bool bUniqueGet = (modelo.Columnas.Where( e => e.TipoDato == WoTypeData.UniqueGet ).FirstOrDefault() != null);
    if(bUniqueGet) 
    {#>
        public static <#=modelo.Id#> GetBy(
            JsonApiClient Client, <#=modelo.Id#>GetBy GetByRequest)
        {
            return Client.Send<<#=modelo.Id#>>(
                new <#=modelo.Id#>GetBy()
                {
<#          foreach(ModeloColumna col in modelo.Columnas.Where( e => e.TipoDato == WoTypeData.UniqueGet ).OrderBy( e => e.Orden )) {
#>
                   <#=col.Id#> = GetByRequest.<#=col.Id#>,
<#          } #>
                });
        }

        public static async Task<<#=modelo.Id#>> GetByAsync(
            JsonApiClient Client, <#=modelo.Id#>GetBy GetByRequest)
        {
            return await Client.SendAsync<<#=modelo.Id#>>(
                new <#=modelo.Id#>GetBy()
                {
<#          foreach(ModeloColumna col in modelo.Columnas.Where( e => e.TipoDato == WoTypeData.UniqueGet ).OrderBy( e => e.Orden )) {
#>
                   <#=col.Id#> = GetByRequest.<#=col.Id#>,
<#          } #>
                });
        }
<#  } 

    if ((modelo.TipoModelo != WoTypeModel.Configuration)
        && (modelo.TipoModelo != WoTypeModel.Control)
        && (modelo.TipoModelo != WoTypeModel.Kardex)
        && (modelo.TipoModelo != WoTypeModel.DataMart))
    { 
        foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial == 0 ))
    {#>
        public static <#=modelo.Id#> Post(
            JsonApiClient Client, <#=modelo.Id#><#=tra.Id#> PostRequest)
        {
            return Client.Send<<#=modelo.Id#>>(PostRequest);
        }

        public static async Task<<#=modelo.Id#>> PostAsync(
            JsonApiClient Client, <#=modelo.Id#><#=tra.Id#> PostRequest)
        {
            return await Client.SendAsync<<#=modelo.Id#>>(PostRequest);
        }

<#  }

        foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial != 0 ) )
        {
            Estado estado = modelo.Diagrama.Estados.Where( es => es.NumId == tra.EstadoFinal ).FirstOrDefault();

            if(estado == null)
                throw new Exception($"No se encontró el estado {tra.EstadoFinal} para el modelo {modelo.Id} transición {tra.Id}");

            if(estado.Tipo == eEstadoTipo.FinalAlternativo) 
            {#>
        public static <#=modelo.Id#> SoftDelete(
            JsonApiClient Client, <#=modelo.Id#><#=tra.Id#> PatchRequest)
        {
            return Client.Put<<#=modelo.Id#>>(PatchRequest);
        }

        public static async Task<<#=modelo.Id#>> SoftDeleteAsync(
            JsonApiClient Client, <#=modelo.Id#><#=tra.Id#> PatchRequest)
        {
            return await Client.PutAsync<<#=modelo.Id#>>(PatchRequest);
        }

<#          }
            else
            { #>
        public static <#=modelo.Id#> Put(
            JsonApiClient Client,  <#=modelo.Id#><#=tra.Id#> PatchRequest)
        {
            return Client.Put<<#=modelo.Id#>>(PatchRequest);
        }

        public static <#=modelo.Id#> Patch(
            JsonApiClient Client,  <#=modelo.Id#><#=tra.Id#> PatchRequest)
        {
            return Client.Patch<<#=modelo.Id#>>(PatchRequest);
        }

        public static async Task<<#=modelo.Id#>> PutAsync(
            JsonApiClient Client, <#=modelo.Id#><#=tra.Id#> PatchRequest)
        {
            return await Client.PutAsync<<#=modelo.Id#>>(PatchRequest);
        }

        public static async Task<<#=modelo.Id#>> PatchAsync(
            JsonApiClient Client, <#=modelo.Id#><#=tra.Id#> PatchRequest)
        {
            return await Client.PatchAsync<<#=modelo.Id#>>(PatchRequest);
        }

<#          }
        }
  
        foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial == 0 ) )
        {#>
        public static IList<<#=modelo.Id#>> Post(
            JsonApiClient Client, IList<<#=modelo.Id#><#=tra.Id#>> PostRequest)
        {
            return Client.SendAll<<#=modelo.Id#>>(PostRequest);
        }

        public static async Task<IList<<#=modelo.Id#>>> PostAsync(
            JsonApiClient Client, IList<<#=modelo.Id#><#=tra.Id#>> PostRequest)
        {
            return await Client.SendAllAsync<<#=modelo.Id#>>(PostRequest);
        }
<#      }

        foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial != 0 ) )
        {        
            Estado estado = modelo.Diagrama.Estados.Where( es => es.NumId == tra.EstadoFinal ).FirstOrDefault();

            if(estado == null)
                throw new Exception($"No se encontró el estado {tra.EstadoFinal} para el modelo {modelo.Id} transición {tra.Id}");

            if(estado.Tipo == eEstadoTipo.FinalAlternativo) 
            {#>
        public static IList<<#=modelo.Id#>> SoftDelete(
            JsonApiClient Client, IList<<#=modelo.Id#><#=tra.Id#>> PatchRequest)
        {
            return Client.SendAll<<#=modelo.Id#>>(PatchRequest);
        }

        public static async Task<IList<<#=modelo.Id#>>> SoftDeleteAsync(
            JsonApiClient Client, IList<<#=modelo.Id#><#=tra.Id#>> PatchRequest)
        {
            return await Client.SendAllAsync<<#=modelo.Id#>>(PatchRequest);
        }

<#          }
            else
            { #>
        public static IList<<#=modelo.Id#>> Put(
            JsonApiClient Client, IList<<#=modelo.Id#><#=tra.Id#>> PatchRequest)
        {
            return Client.SendAll<<#=modelo.Id#>>(PatchRequest);
        }

        public static async Task<IList<<#=modelo.Id#>>> PutAsync(
            JsonApiClient Client, IList<<#=modelo.Id#><#=tra.Id#>> PatchRequest)
        {
            return await Client.SendAllAsync<<#=modelo.Id#>>(PatchRequest);
        }
<#          } 
        }

        if(modelo.bPostCondicionesExist) {
            foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => ((modelo.TipoModelo == WoTypeModel.TransactionContable) && (e.EstadoFinal == 300)) ) ) {
#>
        public static WoConPolizaRegistraYAfectar PolizaPrevia(
            JsonApiClient Client, <#=modelo.Id#>PolizaPrevia GetRequest)
        {
            return Client.Send<WoConPolizaRegistraYAfectar>(GetRequest);
        }

        public static async Task<WoConPolizaRegistraYAfectar> PolizaPreviaAsync(
            JsonApiClient Client, <#=modelo.Id#>PolizaPrevia GetRequest)
        {
            return await Client.SendAsync<WoConPolizaRegistraYAfectar>(GetRequest);
        }
<#          }
		}
        if ((modelo.TipoModelo == WoTypeModel.CatalogType) ||
            (modelo.TipoModelo == WoTypeModel.Catalog)) 
        {  #>

        public static <#=modelo.Id#> Delete(
            JsonApiClient Client, <#=TipoId#> Id)
        {
            return Client.Delete<<#=modelo.Id#>>(
                new <#=modelo.Id#>Borrar()
                {
                    Id = Id
                });
        }

        public static <#=modelo.Id#> Delete(
            JsonApiClient Client, <#=modelo.Id#>Borrar PatchRequest)
        {
            return Client.Delete<<#=modelo.Id#>>(PatchRequest);
        }

        public static async Task<<#=modelo.Id#>> DeleteAsync(
            JsonApiClient Client, <#=modelo.Id#>Borrar PatchRequest)
        {
            return await Client.DeleteAsync<<#=modelo.Id#>>(PatchRequest);
        }

        public static IList<<#=modelo.Id#>> Delete(
            JsonApiClient Client, IList<<#=modelo.Id#>Borrar> PatchRequest)
        {
            return Client.SendAll<<#=modelo.Id#>>(PatchRequest);
        }

        public static async Task<IList<<#=modelo.Id#>>> DeleteAsync(
            JsonApiClient Client, IList<<#=modelo.Id#>Borrar> PatchRequest)
        {
            return await Client.SendAllAsync<<#=modelo.Id#>>(PatchRequest);
        }
<#      }
    }
#>
    }
}
<#+
public Modelo modelo { get; set; }  
public string TipoId { get; set; }
#>