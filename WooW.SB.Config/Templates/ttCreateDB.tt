<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="WooW.Core" #>
<#@ import namespace="System.Collections.Generic" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttCreateDB
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------//
using ServiceStack.OrmLite;
using WooW.Model;
using System.Data;
using WooW.Core;
using WooW.Core.Common;
using WooW.WebService.WoSchemaAnalysis;


namespace WooW.Model;

public class CreateDB
{
    public static void Do(IDbConnection db, tWoIntanciaType IntanciaType, tWoDataBaseProviders DbProvider)
    {

<#          Tablas = new List<string>();

            foreach(Modelo modelo in proyecto.ModeloCol.Modelos.Where(e =>
                (e.TipoModelo == WoTypeModel.Configuration)
                || (e.TipoModelo == WoTypeModel.CatalogType)
                || (e.TipoModelo == WoTypeModel.Catalog)
                || (e.TipoModelo == WoTypeModel.CatalogSlave)
                || (e.TipoModelo == WoTypeModel.TransactionContable)
                || (e.TipoModelo == WoTypeModel.TransactionNoContable)
                || (e.TipoModelo == WoTypeModel.TransactionSlave)
                || (e.TipoModelo == WoTypeModel.TransactionFreeStyle)
                || (e.TipoModelo == WoTypeModel.Control)
                || (e.TipoModelo == WoTypeModel.Kardex)
                || (e.TipoModelo == WoTypeModel.DataMart)
                || (e.TipoModelo == WoTypeModel.Parameter)
                || (e.TipoModelo == WoTypeModel.View )).OrderBy( e => e.OrdenDeCreacion)) {

                if(!modelo.IsInTheApp(AppId))
                    continue;

                if(modelo.OrdenDeCreacion == -1) 
                    throw new Exception($"Modelo {modelo.Id} no tiene orden de creación");

                Tablas.Add(modelo.Id);

                var ModelCreationFiles = modelo.ListModelCreationFiles();
                if(ModelCreationFiles.Count > 0) {
                    if((ModelCreationFiles.Count == 1) && (ModelCreationFiles[0].Item1 != string.Empty)) // No tiene creacion base
                    { #>
        try
        {
            if (!db.CreateTableIfNotExists<<#=modelo.Id#>>())
            {
                WoSchema.AddMissingColumns<<#=modelo.Id#>>(db, DbProvider);
            }
        } 
        catch (Exception ex)
        {
            WoHelperDB.OnCreateExcepcion(db, IntanciaType, DbProvider, ex.Message);
        };
<#      }
                    foreach(var modelCreationFile in ModelCreationFiles) {#>
        try
        {
            <#=modelo.Id#>Create<#=modelCreationFile.Item1#>.Do(db, IntanciaType, DbProvider);
        } 
        catch (Exception ex)
        {
            WoHelperDB.OnCreateExcepcion(db, IntanciaType, DbProvider, ex.Message);
        };        
<#                  }
                } else { #>
        try
        {
            if (!db.CreateTableIfNotExists<<#=modelo.Id#>>())
            {
                WoSchema.AddMissingColumns<<#=modelo.Id#>>(db, DbProvider);
            }
        } 
        catch (Exception ex)
        {
            WoHelperDB.OnCreateExcepcion(db, IntanciaType, DbProvider, ex.Message);
        };        
<#              } 
            }#>
    }

    public static List<string> Tablas()
    {
        List<string> tablas = new List<string>();
        <#foreach(string tabla in Tablas) {#>
        tablas.Add("<#=tabla#>");
        <#}#>

        return tablas;
    }


    public static int TotalTablas()
    {
        return <#=Tablas.Count()#>;
    }




    public static void DoForeignKey(IDbConnection db, tWoIntanciaType IntanciaType, tWoDataBaseProviders DbProvider)
    {

<#          foreach(Modelo modelo in proyecto.ModeloCol.Modelos.Where(e =>
                (e.TipoModelo == WoTypeModel.Configuration)
                || (e.TipoModelo == WoTypeModel.CatalogType)
                || (e.TipoModelo == WoTypeModel.Catalog)
                || (e.TipoModelo == WoTypeModel.CatalogSlave)
                || (e.TipoModelo == WoTypeModel.TransactionContable)
                || (e.TipoModelo == WoTypeModel.TransactionNoContable)
                || (e.TipoModelo == WoTypeModel.TransactionSlave)
                || (e.TipoModelo == WoTypeModel.TransactionFreeStyle)
                || (e.TipoModelo == WoTypeModel.Control)
                || (e.TipoModelo == WoTypeModel.Kardex)
                || (e.TipoModelo == WoTypeModel.DataMart)
                || (e.TipoModelo == WoTypeModel.Parameter)).OrderBy( e => e.OrdenDeCreacion)) {

                if(!modelo.IsInTheApp(AppId))
                    continue;

                if(modelo.OrdenDeCreacion == -1) {
                    throw new Exception($"Modelo {modelo.Id} no tiene orden de creación");
                }

                foreach(ModeloColumna col in modelo.Columnas.Where( e => (e.TipoColumna == WoTypeColumn.Reference) && !e.EsColeccion))
                { 
#>
<#=col.ToForeign(modelo.Id, col.ModeloId, col.Id, "Id")#>

<#
                }

                bool bUniqueGet = (
                    modelo.Columnas.Where(e => e.TipoDato == WoTypeData.UniqueGet).FirstOrDefault()
                    != null
                );
                if (bUniqueGet)
                {
                    string CompositeIndex =
                        $"CREATE UNIQUE INDEX IF NOT EXISTS uidx_{modelo.Id}_wwuk on {modelo.Id} (";
                    bool bInit = true;
                    foreach (
                        var col in modelo
                            .Columnas.Where(e => e.TipoDato == WoTypeData.UniqueGet)
                            .OrderBy(e => e.Orden)
                            .ToList()
                    )
                    {
                        if (!bInit)
                            CompositeIndex += ", ";
                        bInit = false;
                        CompositeIndex += col.Id;
                    }

                    CompositeIndex += ")";
#>
        try
        {
            if(DbProvider == tWoDataBaseProviders.Postgres)
            {
                string sql = "<#=CompositeIndex#>";
                db.ExecuteNonQuery(sql);
            }
        }
        catch (Exception) { };

<#
                }
        }#>
    }




}
<#+
public Proyecto proyecto { get; set; }  
public string AppId { get; set; }  
public List<string> Tablas { get; set; }  
public int TotalTablas { get; set; }  
#>
