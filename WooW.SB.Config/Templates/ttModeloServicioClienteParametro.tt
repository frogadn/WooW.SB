<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="WooW.Core" #>
<#@ import namespace="WooW.SB.Config" #>
<#@ import namespace="WooW.SB.Config.Enum" #>
<#@ import namespace="WooW.SB.UI.EnumExtension" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttModeloServicioClienteParametro
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated> 
// ------------------------------------------------------------------------------//
using WooW.Core;
using WooW.DTO;
using ServiceStack;

namespace WooW.Model
{
    public partial class <#=modelo.Id#>
    {

        public static <#=modelo.Id#> Get(
            JsonApiClient Client)
        {
            var GetRequest = new <#=modelo.Id#>Get();
            return Client.Send<<#=modelo.Id#>>(GetRequest);
        }

        public static async Task<<#=modelo.Id#>> GetAsync(
            JsonApiClient Client)
        {
            var GetRequest = new <#=modelo.Id#>Get();
            return await Client.SendAsync<<#=modelo.Id#>>(GetRequest);
        }

    <#foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial == 0 ))
    {#>
        public static <#=modelo.Id#> Post(
            JsonApiClient Client, <#=modelo.Id#><#=tra.Id#> PostRequest)
        {
            return Client.Send<<#=modelo.Id#>>(PostRequest);
        }

        public static async Task<<#=modelo.Id#>> PostAsync(
            JsonApiClient Client, <#=modelo.Id#><#=tra.Id#> PostRequest)
        {
            return await Client.SendAsync<<#=modelo.Id#>>(PostRequest);
        }

<#  }

    foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial != 0 ) )
    {
        Estado estado = modelo.Diagrama.Estados.Where( es => es.NumId == tra.EstadoFinal ).FirstOrDefault();

        if(estado == null)
            throw new Exception($"No se encontró el estado {tra.EstadoFinal} para el modelo {modelo.Id} transición {tra.Id}");
    #>
    public static <#=modelo.Id#> Patch(
        JsonApiClient Client,  <#=modelo.Id#><#=tra.Id#> PatchRequest)
    {
        return Client.Patch<<#=modelo.Id#>>(PatchRequest);
    }

    public static async Task<<#=modelo.Id#>> PatchAsync(
        JsonApiClient Client, <#=modelo.Id#><#=tra.Id#> PatchRequest)
    {
        return await Client.PatchAsync<<#=modelo.Id#>>(PatchRequest);
    }

    public static <#=modelo.Id#> Put(
        JsonApiClient Client,  <#=modelo.Id#><#=tra.Id#> PatchRequest)
    {
        return Client.Put<<#=modelo.Id#>>(PatchRequest);
    }

    public static async Task<<#=modelo.Id#>> PutAsync(
        JsonApiClient Client, <#=modelo.Id#><#=tra.Id#> PatchRequest)
    {
        return await Client.PutAsync<<#=modelo.Id#>>(PatchRequest);
    }

<#          
    }
  
    foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial == 0 ) )
    {#>
    public static IList<<#=modelo.Id#>> Post(
        JsonApiClient Client, IList<<#=modelo.Id#><#=tra.Id#>> PostRequest)
    {
        return Client.SendAll<<#=modelo.Id#>>(PostRequest);
    }

    public static async Task<IList<<#=modelo.Id#>>> PostAsync(
        JsonApiClient Client, IList<<#=modelo.Id#><#=tra.Id#>> PostRequest)
    {
        return await Client.SendAllAsync<<#=modelo.Id#>>(PostRequest);
    }
<#      }

    foreach(Transicion tra in modelo.Diagrama.Transiciones.Where( e => e.EstadoInicial != 0 ) )
    {        
        Estado estado = modelo.Diagrama.Estados.Where( es => es.NumId == tra.EstadoFinal ).FirstOrDefault();

        if(estado == null)
            throw new Exception($"No se encontró el estado {tra.EstadoFinal} para el modelo {modelo.Id} transición {tra.Id}");
        #>
    public static IList<<#=modelo.Id#>> Patch(
        JsonApiClient Client, IList<<#=modelo.Id#><#=tra.Id#>> PatchRequest)
    {
        return Client.SendAll<<#=modelo.Id#>>(PatchRequest);
    }

    public static async Task<IList<<#=modelo.Id#>>> PatchAsync(
        JsonApiClient Client, IList<<#=modelo.Id#><#=tra.Id#>> PatchRequest)
    {
        return await Client.SendAllAsync<<#=modelo.Id#>>(PatchRequest);
    }
<#          
    }
#>
    }
}
<#+
public Modelo modelo { get; set; }  
#>