// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del runtime: 17.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WooW.SB.Config.Templates
{
    using System.Linq;
    using System.Text;
    using WooW.Core;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ttCreateDB : ttCreateDBBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta. WooW.SB ttCreateDB
//     Versión del runtime: 1.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------//
using ServiceStack.OrmLite;
using WooW.Model;
using System.Data;
using WooW.Core;
using WooW.Core.Common;
using WooW.WebService.WoSchemaAnalysis;


namespace WooW.Model;

public class CreateDB
{
    public static void Do(IDbConnection db, tWoIntanciaType IntanciaType, tWoDataBaseProviders DbProvider)
    {

");
            
            #line 31 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
          Tablas = new List<string>();

            foreach(Modelo modelo in proyecto.ModeloCol.Modelos.Where(e =>
                (e.TipoModelo == WoTypeModel.Configuration)
                || (e.TipoModelo == WoTypeModel.CatalogType)
                || (e.TipoModelo == WoTypeModel.Catalog)
                || (e.TipoModelo == WoTypeModel.CatalogSlave)
                || (e.TipoModelo == WoTypeModel.TransactionContable)
                || (e.TipoModelo == WoTypeModel.TransactionNoContable)
                || (e.TipoModelo == WoTypeModel.TransactionSlave)
                || (e.TipoModelo == WoTypeModel.TransactionFreeStyle)
                || (e.TipoModelo == WoTypeModel.Control)
                || (e.TipoModelo == WoTypeModel.Kardex)
                || (e.TipoModelo == WoTypeModel.DataMart)
                || (e.TipoModelo == WoTypeModel.Parameter)
                || (e.TipoModelo == WoTypeModel.View )).OrderBy( e => e.OrdenDeCreacion)) {

                if(!modelo.IsInTheApp(AppId))
                    continue;

                if(modelo.OrdenDeCreacion == -1) 
                    throw new Exception($"Modelo {modelo.Id} no tiene orden de creación");

                Tablas.Add(modelo.Id);

                var ModelCreationFiles = modelo.ListModelCreationFiles();
                if(ModelCreationFiles.Count > 0) {
                    if((ModelCreationFiles.Count == 1) && (ModelCreationFiles[0].Item1 != string.Empty)) // No tiene creacion base
                    { 
            
            #line default
            #line hidden
            this.Write("        try\r\n        {\r\n            if (!db.CreateTableIfNotExists<");
            
            #line 62 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelo.Id));
            
            #line default
            #line hidden
            this.Write(">())\r\n            {\r\n                WoSchema.AddMissingColumns<");
            
            #line 64 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelo.Id));
            
            #line default
            #line hidden
            this.Write(">(db, DbProvider);\r\n            }\r\n        } \r\n        catch (Exception ex)\r\n    " +
                    "    {\r\n            WoHelperDB.OnCreateExcepcion(db, IntanciaType, DbProvider, ex" +
                    ".Message);\r\n        };\r\n");
            
            #line 71 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
      }
                    foreach(var modelCreationFile in ModelCreationFiles) {
            
            #line default
            #line hidden
            this.Write("        try\r\n        {\r\n            ");
            
            #line 75 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelo.Id));
            
            #line default
            #line hidden
            this.Write("Create");
            
            #line 75 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelCreationFile.Item1));
            
            #line default
            #line hidden
            this.Write(".Do(db, IntanciaType, DbProvider);\r\n        } \r\n        catch (Exception ex)\r\n   " +
                    "     {\r\n            WoHelperDB.OnCreateExcepcion(db, IntanciaType, DbProvider, e" +
                    "x.Message);\r\n        };        \r\n");
            
            #line 81 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
                  }
                } else { 
            
            #line default
            #line hidden
            this.Write("        try\r\n        {\r\n            if (!db.CreateTableIfNotExists<");
            
            #line 85 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelo.Id));
            
            #line default
            #line hidden
            this.Write(">())\r\n            {\r\n                WoSchema.AddMissingColumns<");
            
            #line 87 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelo.Id));
            
            #line default
            #line hidden
            this.Write(">(db, DbProvider);\r\n            }\r\n        } \r\n        catch (Exception ex)\r\n    " +
                    "    {\r\n            WoHelperDB.OnCreateExcepcion(db, IntanciaType, DbProvider, ex" +
                    ".Message);\r\n        };        \r\n");
            
            #line 94 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
              } 
            }
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n    public static List<string> Tablas()\r\n    {\r\n        List<string> tab" +
                    "las = new List<string>();\r\n        ");
            
            #line 101 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
foreach(string tabla in Tablas) {
            
            #line default
            #line hidden
            this.Write("        tablas.Add(\"");
            
            #line 102 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tabla));
            
            #line default
            #line hidden
            this.Write("\");\r\n        ");
            
            #line 103 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n        return tablas;\r\n    }\r\n\r\n\r\n    public static int TotalTablas()\r\n    {\r\n" +
                    "        return ");
            
            #line 111 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Tablas.Count()));
            
            #line default
            #line hidden
            this.Write(";\r\n    }\r\n\r\n\r\n\r\n\r\n    public static void DoForeignKey(IDbConnection db, tWoIntanc" +
                    "iaType IntanciaType, tWoDataBaseProviders DbProvider)\r\n    {\r\n\r\n");
            
            #line 120 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
          foreach(Modelo modelo in proyecto.ModeloCol.Modelos.Where(e =>
                (e.TipoModelo == WoTypeModel.Configuration)
                || (e.TipoModelo == WoTypeModel.CatalogType)
                || (e.TipoModelo == WoTypeModel.Catalog)
                || (e.TipoModelo == WoTypeModel.CatalogSlave)
                || (e.TipoModelo == WoTypeModel.TransactionContable)
                || (e.TipoModelo == WoTypeModel.TransactionNoContable)
                || (e.TipoModelo == WoTypeModel.TransactionSlave)
                || (e.TipoModelo == WoTypeModel.TransactionFreeStyle)
                || (e.TipoModelo == WoTypeModel.Control)
                || (e.TipoModelo == WoTypeModel.Kardex)
                || (e.TipoModelo == WoTypeModel.DataMart)
                || (e.TipoModelo == WoTypeModel.Parameter)).OrderBy( e => e.OrdenDeCreacion)) {

                if(!modelo.IsInTheApp(AppId))
                    continue;

                if(modelo.OrdenDeCreacion == -1) {
                    throw new Exception($"Modelo {modelo.Id} no tiene orden de creación");
                }

                foreach(ModeloColumna col in modelo.Columnas.Where( e => (e.TipoColumna == WoTypeColumn.Reference) && !e.EsColeccion))
                { 

            
            #line default
            #line hidden
            
            #line 144 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.ToForeign(modelo.Id, col.ModeloId, col.Id, "Id")));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 146 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"

                }

                bool bUniqueGet = (
                    modelo.Columnas.Where(e => e.TipoDato == WoTypeData.UniqueGet).FirstOrDefault()
                    != null
                );
                if (bUniqueGet)
                {
                    string CompositeIndex =
                        $"CREATE UNIQUE INDEX IF NOT EXISTS uidx_{modelo.Id}_wwuk on {modelo.Id} (";
                    bool bInit = true;
                    foreach (
                        var col in modelo
                            .Columnas.Where(e => e.TipoDato == WoTypeData.UniqueGet)
                            .OrderBy(e => e.Orden)
                            .ToList()
                    )
                    {
                        if (!bInit)
                            CompositeIndex += ", ";
                        bInit = false;
                        CompositeIndex += col.Id;
                    }

                    CompositeIndex += ")";

            
            #line default
            #line hidden
            this.Write("        try\r\n        {\r\n            if(DbProvider == tWoDataBaseProviders.Postgre" +
                    "s)\r\n            {\r\n                string sql = \"");
            
            #line 177 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CompositeIndex));
            
            #line default
            #line hidden
            this.Write("\";\r\n                db.ExecuteNonQuery(sql);\r\n            }\r\n        }\r\n        c" +
                    "atch (Exception) { };\r\n\r\n");
            
            #line 183 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"

                }
        }
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n\r\n\r\n\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 192 "C:\Frog\WooW.SB.Config\Templates\ttCreateDB.tt"

public Proyecto proyecto { get; set; }  
public string AppId { get; set; }  
public List<string> Tablas { get; set; }  
public int TotalTablas { get; set; }  

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class ttCreateDBBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
